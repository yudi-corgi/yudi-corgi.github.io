import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as c,c as i,a as n,b as s,d as a,w as l,e as u}from"./app-c6107c5d.js";const k="/assets/浏览器控制台-39960f45.jpg",r="/assets/IDEA控制台-da919e11.jpg",d={},v=n("h2",{id:"介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),s(" 介绍")],-1),m=n("p",null,[n("strong",null,"WebSocket 协议"),s(" 是基于 TCP 协议的全双工通信协议，是通过单个 TCP 连接在客户端和服务器之间建立全双工、双向通信通道，可让客户端与服务端建立持久连接，并实时互传数据。它与 HTTP 同为应用层协议，但相比于 HTTP 的请求 - 响应模型，WebSocket 则提供了实时、低延迟的数据传输能力和长连接功能，旨在解决 HTTP 协议在实时通信方面的局限性，如请求 - 响应模式的单向性以及频繁的连接、断开开销。WebSocket 的特性，使得其在即时通讯、游戏同步、IOT 设备实时监控等应用场景大放异彩，已成为现代 Web 应用中常用的通讯协议之一。")],-1),b=n("p",null,"在 Spring Boot 中整合 WebSocket 方式有两种：",-1),g=n("ol",null,[n("li",null,"使用 Jakarta EE 规范提供的 API"),n("li",null,"使用 Spring 本身提供的模块依赖")],-1),h=u(`<blockquote><p><strong>题外话</strong>：Jakarta EE 前身是 Java EE，因为后者在 2017 年被 Oracle 公司捐赠给了 Eclipse Foundation，之后 2018 年 Eclipse 基金会便发布了 Jakarta EE 9，之所以改名，是因为「<strong>Java</strong>」这个名字的商标归 Oracle 所有，Eclipse 基金会无法继续使用 <code>javax.*</code>、<code>java.*</code>等名称，因此将其改为「<strong>Jakarta（雅加达）</strong>」，而 Spring Boot 从 3.x 开始便从 Java EE 切换到了 Jakarta EE。值得一提的是，<strong>Jakarta</strong>（雅加达）是 <strong>Java</strong> 岛（爪洼岛）上最大的城市，也是印度尼西亚的首都，而 Apache 软件基金会也有名为 Jakarta 的项目，但两者没有任何关系。</p></blockquote><h2 id="集成-jakarta-websocket" tabindex="-1"><a class="header-anchor" href="#集成-jakarta-websocket" aria-hidden="true">#</a> 集成 Jakarta WebSocket</h2><h3 id="项目依赖" tabindex="-1"><a class="header-anchor" href="#项目依赖" aria-hidden="true">#</a> 项目依赖</h3><p>首先创建 Spring Boot 项目，笔者使用的版本：<code>3.2.2</code>，然后在<code>pom.xml</code>添加如下依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="端点" tabindex="-1"><a class="header-anchor" href="#端点" aria-hidden="true">#</a> 端点</h3><p>根据 Jakarta WebSocket 规范（见<a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料 1</a>），服务器端点的创建有两种方式：一是实现规范所提供的接口，如<code>Endpoint</code>，并实现其相关方法来处理新连接建立、消息接收、连接断开等时间；二是通过注解，较为便捷与灵活。接下来的所有代码示例也是基于注解方式实现。</p><p>首先创建一个服务器端点，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ServerEndpoint</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/channel/call/{uid}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallChannel</span> <span class="token punctuation">{</span>
    
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">CallChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Session</span> session<span class="token punctuation">;</span>
    <span class="token comment">// 存储客户端连接</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">CallChannel</span><span class="token punctuation">&gt;</span></span> wsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    <span class="token annotation punctuation">@OnMessage</span><span class="token punctuation">(</span>maxMessageSize <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token keyword">boolean</span> last<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span> 
				<span class="token comment">// ID 是标识连接的唯一字符，每个连接仅此一个，Tomcat 下是从 0 递增，undertow 则为类似 UUID 的字符串</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;收到来自客户端的消息:{} - {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 发送消息给客户端，此处使用异步发送</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">getAsyncRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这个是同步发送，会阻塞至消息发送成功</span>
        <span class="token comment">// RemoteEndpoint.Basic basicRemote = this.session.getBasicRemote();</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>last<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// do something...</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 发送 bye 则关闭连接</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;bye&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CloseReason</span><span class="token punctuation">(</span><span class="token class-name">CloseReason<span class="token punctuation">.</span>CloseCodes</span><span class="token punctuation">.</span><span class="token constant">NORMAL_CLOSURE</span><span class="token punctuation">,</span> <span class="token string">&quot;Bye&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@OnOpen</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathParam</span><span class="token punctuation">(</span><span class="token string">&quot;uid&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> uid<span class="token punctuation">,</span> <span class="token class-name">EndpointConfig</span> endpointConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    		<span class="token comment">// 保存在实例变量中，Jakarta WS 每建立一个连接便会创建一个端点，因此该变量是线程安全的</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>session <span class="token operator">=</span> session<span class="token punctuation">;</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;新的连接：id={}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// session 可获取连接请求的查询参数，路径参数则需要在 WS 的端点路径上（@ServerEndpoint）配置</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> requestParameterMap <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getRequestParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;获取到请求参数：{}&quot;</span><span class="token punctuation">,</span> requestParameterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;获取到路径参数：{}&quot;</span><span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 配置信息</span>
        <span class="token class-name">PojoMethodMapping</span> mapping <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PojoMethodMapping</span><span class="token punctuation">)</span> endpointConfig<span class="token punctuation">.</span><span class="token function">getUserProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;org.apache.tomcat.websocket.pojo.PojoEndpoint.methodMapping&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[websocket] 连接路径：id={}, path={}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mapping<span class="token punctuation">.</span><span class="token function">getWsPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@OnClose</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token class-name">CloseReason</span> reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;连接断开：id={}，reason={}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@OnError</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;连接异常：id={}，throwable={}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 关闭连接。状态码为 UNEXPECTED_CONDITION（非预期异常）</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CloseReason</span><span class="token punctuation">(</span><span class="token class-name">CloseReason<span class="token punctuation">.</span>CloseCodes</span><span class="token punctuation">.</span><span class="token constant">UNEXPECTED_CONDITION</span><span class="token punctuation">,</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">clientSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> wsMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@ServerEndpoint</code>注解用于声明此类是一个 WebSocket 端点，value 属性必填，其表明了 WebSocket 连接路由，注解还包括<code>subprotocols</code>、<code>decoders</code>、<code>encoders</code>等属性可以定义子协议、数据编解码器等。</p><h4 id="onopen" tabindex="-1"><a class="header-anchor" href="#onopen" aria-hidden="true">#</a> @OnOpen</h4><p><code>@OnOpen</code>注解的方法会监听客户端的连接事件，方法参数一<code>session</code>必填，表示连接对象（其实所有方法都支持使用 session 作为参数）。而<code>uid</code>是通过端点路径配置的路径参数。想必大家也能意识到，通过端点路径是可以传递查询参数或路径参数的，如代码所示去获取参数即可。</p><p><strong>每当有新的客户端连接接入时，服务器便会创建一个新的端点实例</strong>，所以 session 的获取是线程安全的，同时也可以在端点类中声明静态缓存（如代码示例中的<code>wsMap</code>），用于存储所有的客户端连接。</p><p>最后一个参数则为端点配置信息对象，可获取当前 WebSocket 端点的信息，通过 Debug 可得到其属性 Key 从而获取数据。</p><h4 id="onclose" tabindex="-1"><a class="header-anchor" href="#onclose" aria-hidden="true">#</a> @OnClose</h4><p><code>@OnClose</code>注解的方法则用于监听连接的关闭，并且方法带有一个<code>CloseReason</code>对象，封装了连接关闭原因、状态码等。</p><h4 id="onerror" tabindex="-1"><a class="header-anchor" href="#onerror" aria-hidden="true">#</a> @OnError</h4><p><code>@OnError</code>方法则用于处理异常事件，该方法必须要有一个<code>Throwable</code>对象来表示发生的异常，否则启动服务时会提示该方法缺少<code>Throwable</code>参数对象。根据异常可针对性的执行某些操作。也可在此对 session 进行关闭，关闭需要传递<code>CloseReason</code>对象，而<code>CloseReason.CloseCodes</code>也已定义了一些常见的枚举原因，可直接使用。</p><h4 id="onmessage" tabindex="-1"><a class="header-anchor" href="#onmessage" aria-hidden="true">#</a> @OnMessage</h4><p><code>@OnMessage</code>方法自然是用来接收客户端消息，通过字符串类型的 message 接收，但 WebSocket 本身也是支持二进制消息的，参数类型可以是<code>String、byte[]</code>或<code>Reader、InputStream</code>。并且该注解还提供了属性<code>maxMessageSize</code>用于控制接收的消息大小，若超出则会断开连接，默认 -1 无限制。</p><p>参数二<code>last</code>用于判断获取到的消息是否为数据的最后一部分，当数据内容过大，WebSocket 会将其分割为多份传递。</p><h3 id="配置端点扫描" tabindex="-1"><a class="header-anchor" href="#配置端点扫描" aria-hidden="true">#</a> 配置端点扫描</h3><p>定义好 WebSocket 端点后，需要创建<code>ServerEndpointExporter</code>对<code>@ServerEndpoint</code>注解的端点进行扫描注册。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextInitializer</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 创建 ServerEndpointExporter 实例，扫描 WS 端点，
     * ServerEndpointExporter 用于检测带有 @ServerEndpoint 注解的类，并为其注册一个 WebSocket 运行时
     * <span class="token keyword">@return</span> ServerEndpointExporter
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ServerEndpointExporter</span> <span class="token function">serverEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 显式注册应该在启动时注册的带注释的端点类型</span>
        <span class="token comment">// exporter.setAnnotatedEndpointClasses(CallChannel.class);</span>
        
        <span class="token comment">// 实际只需在端点类上加 @Component 注解，因为 exporter 会扫描带有 @ServerEndpoint 注解的 Bean</span>
        <span class="token comment">// 详细可见 ServerEndpointExporter#afterSingletonsInstantiated 方法</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServerEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="js-连接测试" tabindex="-1"><a class="header-anchor" href="#js-连接测试" aria-hidden="true">#</a> JS 连接测试</h3><p>在项目中的<code>src/main/resources</code>下创建<code>public</code>目录，并创建文件<code>index.html</code>，Spring Boot 默认将此作为应用主页，如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>WebSocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> websocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&quot;ws://localhost:8080/channel/call/9527&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 连接断开</span>
    websocket<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">连接关闭: code=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, reason=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token punctuation">.</span>reason<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 收到消息</span>
    websocket<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">收到消息：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 异常</span>
    websocket<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;连接异常&quot;</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 连接打开</span>
    websocket<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;连接打开&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建连接后，往服务器连续写入 3 条消息</span>
        websocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;这是第一条消息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        websocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;这是第二条消息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        websocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;这是第三条消息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 最后发送 bye，由服务器断开连接</span>
        websocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;bye&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 也可以由客户端主动断开</span>
        <span class="token comment">// websocket.close();</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>首先与服务端点建立 webSocket 连接：<code>ws://localhost:8080/channel/call/9527</code>，<code>9527</code>是路径参数</li><li>连接接入后，在<code>onopen</code>函数中打印日志并向服务端发送三条数据，最后发送<code>bye</code>给服务端关闭连接</li><li>连接关闭后，<code>onclose</code>方法也能得到回调并输出日志</li><li><code>onmessage</code>自然是接收服务端推送的内容，实际应用中也是在此处根据消息来执行业务逻辑</li></ol><p>然后启动服务，在浏览器访问应用地址即可，记得打开浏览器控制台：</p><figure><img src="`+k+'" alt="浏览器控制台信息" tabindex="0" loading="lazy"><figcaption>浏览器控制台信息</figcaption></figure><figure><img src="'+r+`" alt="IDEA 控制台信息" tabindex="0" loading="lazy"><figcaption>IDEA 控制台信息</figcaption></figure><h3 id="在端点中注入-bean" tabindex="-1"><a class="header-anchor" href="#在端点中注入-bean" aria-hidden="true">#</a> 在端点中注入 Bean</h3><p>在端点中注入 Spring Bean，并不能直接通过<code>@Autowired</code>等注解注入依赖，因为端点并非由 Spring 创建，而是由服务器（Spring Boot 默认是 Tomcat）创建。因此，在端点上添加<code>@Component</code>注解只是表示会由 Spring IOC 管理而已，所以可通过<code>ApplicationContextAware</code>接口得到<code>ApplicationContext</code>来获取 Bean。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ServerEndpoint</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/channel/call/{uid}&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallChannel</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>
    
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ApplicationContext</span> springContext<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>  <span class="token comment">// 假设 UserService 是其它 Bean 依赖</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        springContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@OnOpen</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathParam</span><span class="token punctuation">(</span><span class="token string">&quot;uid&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> uid<span class="token punctuation">,</span> <span class="token class-name">EndpointConfig</span> endpointConfig<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>session <span class="token operator">=</span> session<span class="token punctuation">;</span>
        <span class="token comment">// 注入 Bean 对象</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> springContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于<code>@OnOpen</code>方法在整个连接的生命周期中，只会执行一次，所以该方式不会带来性能损耗。</p><h3 id="关于-onmessage-方法的-last-参数" tabindex="-1"><a class="header-anchor" href="#关于-onmessage-方法的-last-参数" aria-hidden="true">#</a> 关于 onMessage 方法的 last 参数</h3><p>上方提到<code>@OnMessage</code>方法的<code>last</code>参数是 WebSocket 自动根据消息内容大小从而确定是否分割数据传递，若分为多份，那么没拿到最后一份数据时，<code>last</code>自然为<code>false</code>。其实这里正确来说，是否将数据分割，是根据 Tomcat 系统配置参数来决定的，即：<code>org.apache.tomcat.websocket.DEFAULT_BUFFER_SIZE</code>，默认<code>8*1024</code>字节。</p><p>Tomcat 服务器下的 WebSocket 在读取数据时，会用到三个<code>Buffer</code>，分别是：</p><ul><li><code>ByteBuffer readBuffer</code>：读缓冲区，用于读取传递的数据，作为中间缓冲区暂存数据，该区默认大小即为<code>DEFAULT_BUFFER_SIZE</code></li><li><code>ByteBuffer messageBufferBinary</code>：字节缓冲区，大小默认<code>8*1024</code>字节</li><li><code>CharBuffer messageBufferText</code>：文本缓冲区,大小默认<code>8*1024</code>字节</li></ul><p>假设客户端此时发送了一条数据，那么会由<code>messageBufferBinary</code>接收，没错，WebSocket 默认将所有数据都用字节缓冲区接收，再根据<code>@OnMessage</code>方法的参数类型来决定是否转化为对应类型。而由字节缓冲区接收后，会利用<code>readBuffer</code>读取数据，从而判断数据是否超出了缓冲区大小，决定是否需要对数据进行切分。也就是说，若传递数据超过<code>8*1024</code>字节，那么当回调<code>@OnMessage</code>方法时，便能看到<code>last</code>参数为<code>false</code>，具体源码可以看：<code>WsFrameBase.java</code>类下的<code>processDataText()</code>与<code>processDataBinary()</code>方法。</p><p>至于上述三个缓冲区的大小设置方式，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WsSummaryApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置 Tomcat 关于 WebSocket readBuffer 缓存区的大小，默认是 8*1024，单位：byte</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;org.apache.tomcat.websocket.DEFAULT_BUFFER_SIZE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;32&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">WsSummaryApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextInitializer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        servletContext<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">WebAppRootListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        servletContext<span class="token punctuation">.</span><span class="token function">setInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;org.apache.tomcat.websocket.textBufferSize&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;1024&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        servletContext<span class="token punctuation">.</span><span class="token function">setInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;org.apache.tomcat.websocket.binaryBufferSize&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;1024&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关于心跳" tabindex="-1"><a class="header-anchor" href="#关于心跳" aria-hidden="true">#</a> 关于心跳</h3><p>Jakarta WebSocket 关于 ping/pong 有对应的规范描述，不过在实际应用中，前后端可约定好<code>ping</code>发送的消息内容，这样服务端可通过<code>@OnMessage</code>来做对应的处理，并不麻烦。或者由服务端开启定时任务主动发送<code>ping</code>消息给客户端也是可以的。网上参考资料不少，在此就不多赘述。</p><h2 id="后续" tabindex="-1"><a class="header-anchor" href="#后续" aria-hidden="true">#</a> 后续</h2><p>此篇内容大量借鉴于参考资料 2 的博客内容，因对 WebSocket 较有兴趣，便学习了一番，不过在查看了其博客站点，发现只是介绍了 Jakarta WebSocket 的整合方式，也没有深入讲解原理。因此笔者在此记录并做了补充，后续再补充 Spring 自身提供的 WebSocket 整合实现。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,47),f={href:"https://jakarta.ee/specifications/websocket/2.0/websocket-spec-2.0#introduction",target:"_blank",rel:"noopener noreferrer"},w={href:"https://springdoc.cn/spring-boot-websocket/",target:"_blank",rel:"noopener noreferrer"};function y(S,E){const p=e("RouterLink"),t=e("ExternalLinkIcon");return c(),i("div",null,[v,m,b,g,n("p",null,[s("本篇是 Spring Boot 整合 WebSocket 系列的第一篇，介绍第一种方式（若对 Spring WebSocket 模块感兴趣，可直跳 "),a(p,{to:"/posts/framework/spring/spring_websocket_two.html"},{default:l(()=>[s("WebSocket 集成（二）")]),_:1}),s("）。")]),h,n("ol",null,[n("li",null,[n("p",null,[n("a",f,[s("Jakarta WebSocket 2.0 规范"),a(t)])])]),n("li",null,[n("p",null,[n("a",w,[s("在 Spring Boot 中整合、使用 WebSocket"),a(t)])])])])])}const q=o(d,[["render",y],["__file","spring_websocket_one.html.vue"]]);export{q as default};
