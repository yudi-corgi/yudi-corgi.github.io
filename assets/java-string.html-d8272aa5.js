import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-507626cf.js";const i="/black-hole/assets/String内存占用示例1-714be024.png",u="/black-hole/assets/String内存占用示例2-b32b1154.png",r="/black-hole/assets/JVM创建字符串对象存储布局-3b8bb74c.png",d="/black-hole/assets/String拼接字节码-JDK8-1cd11d17.png",k="/black-hole/assets/String拼接字节码-JDK11-996fad70.png",v={},m=e('<h2 id="引子" tabindex="-1"><a class="header-anchor" href="#引子" aria-hidden="true">#</a> 引子</h2><p>相信每个 Javaer 都遇到过这个问题：<code>String abc = new String(&quot;123&quot;);</code> 创建了几个对象？其作为八股文已是老生常谈，考究的是大伙对对象创建以及字符串在 JVM 中的存储理解。本篇文章就来深入探讨下 String 方方面面的问题。</p><h2 id="string-内部结构" tabindex="-1"><a class="header-anchor" href="#string-内部结构" aria-hidden="true">#</a> String 内部结构</h2><h3 id="char-byte" tabindex="-1"><a class="header-anchor" href="#char-byte" aria-hidden="true">#</a> char[] -&gt; byte[]</h3><p>String 内部原本使用一个 <code>char[] value</code> 存储字符，若不是”版本任你更，我用 Java 8“ 的钉子户，应该能发现从 JDK 9 开始，它就变成了 <code>byte[] value</code>。这么做的目的主要是为了<strong>减少字符串占用的内存，减少 GC 次数</strong>。（详见参考资料<a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">JEP 254</a>）</p><p>以下是笔者在本地启动的同一 Java 服务在 JDK 8/11 两个版本的堆内存统计情况，能看到 String 的实例数量和内存占用均名列前茅。并且在 JDK 8 版本中，由于 String 还是使用 <code>char[]</code> 存储内容，<code>char[]</code> 内存占用高居第一，而到了 JDK 11 优化为 <code>byte[]</code> 后，<code>char[]</code> 的内存占用就被打下去了，优化效果一目了然。</p><figure><img src="'+i+'" alt="JDK8-String 实例内存占用示例" tabindex="0" loading="lazy"><figcaption>JDK8-String 实例内存占用示例</figcaption></figure><figure><img src="'+u+'" alt="JDK11-String 实例内存占用示例" tabindex="0" loading="lazy"><figcaption>JDK11-String 实例内存占用示例</figcaption></figure>',8),g=n("code",null,"char",-1),b={href:"https://zh.wikipedia.org/wiki/ISO/IEC_8859-1",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"char",-1),f=n("code",null,"char[]",-1),y=n("code",null,"byte[]",-1),S=e(`<p>这里贴出 JDK 8/9 的 String 构造函数源码，方便读者理解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// JDK 8</span>
<span class="token doc-comment comment">/** The value is used for character storage. */</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&gt;</span> value<span class="token punctuation">.</span>length <span class="token operator">-</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> offset<span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// JDK 9</span>
<span class="token comment">// char[] 换成 byte[]</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span>

<span class="token comment">// 添加了该字段，是用于对 value 中的字节进行编码的编码标识符，此实现中支持的值为 LATIN1、UTF16</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span> coder<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codePoints<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">checkBoundsOffCount</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> count<span class="token punctuation">,</span> codePoints<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>coder <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>coder<span class="token punctuation">;</span>  <span class="token comment">// 通过 coder 指示该字符串用何种编码方式</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">COMPACT_STRINGS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 检测是否都为 Latin-1 字符</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> val <span class="token operator">=</span> <span class="token class-name">StringLatin1</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>codePoints<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>coder <span class="token operator">=</span> <span class="token constant">LATIN1</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 不是则使用 UTF-16</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>coder <span class="token operator">=</span> <span class="token constant">UTF16</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">StringUTF16</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>codePoints<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="utf-8-utf-16" tabindex="-1"><a class="header-anchor" href="#utf-8-utf-16" aria-hidden="true">#</a> UTF-8？UTF-16？</h3><p>再来说说为什么 Java 采用的是 UTF-16 而不是 UTF-8。</p><p>由于 Java 原来使用 <code>char[]</code> 保存内容，可以看到像 <code>charAt()</code>、<code>subString()</code> 等多数方法都是返回的 <code>char</code>，也就是说 String 是按 <code>char</code> 2 字节来划分字符串的，这就摁死了字符的编码不能采用变长的字符编码方式，因为 String 有随机访问的需求。看到这读者可能就立马有疑惑了：可是 UTF-8 和 UTF-16 都是变长的啊？</p><p>勿急，且听笔者细细说来。我们先来说明下两种编码的区别，答案就不言而喻了。</p>`,6),w=n("li",null,[n("strong",null,"UTF-8"),s("：是针对 Unicode 的可变长度字符编码，编码后的长度为 1~4 字节，可编码范围是 U+0000 ~ U+10FFFF；")],-1),_=n("strong",null,"UTF-16",-1),q={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Code_unit",target:"_blank",rel:"noopener noreferrer"},B={href:"https://baike.baidu.com/item/%E5%9F%BA%E6%9C%AC%E5%A4%9A%E6%96%87%E7%A7%8D%E5%B9%B3%E9%9D%A2/10788078",target:"_blank",rel:"noopener noreferrer"},j={href:"https://baike.c114.com.cn/view.asp?id=14684-33AB06D6",target:"_blank",rel:"noopener noreferrer"},J=e(`<p>所以 UTF-16 虽然是变长，但固定为 2、4 字节，刚好符合 Java 1~2 个 <code>char</code> 所占用的长度，也就相当于是定长了，自然也能匹配 String 各种 API 的读取返回。</p><p>关于 Java 字符编码也可看看参考资料的 <a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">stack overflow 问题</a>。</p><h3 id="string-真的不可变" tabindex="-1"><a class="header-anchor" href="#string-真的不可变" aria-hidden="true">#</a> String 真的不可变？</h3><p>String 的不可变主要依据于其类与属性的声明，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// JDK 8 源码</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>final</code> 已经限制了 String 不可被继承，并且 value 数组也是采用 <code>final</code> 修饰，说明 value 的引用地址不可变。到这里都没什么问题，符合大家一贯的理解，但细心的读者会发现，笔者所说的是 <strong>value 的引用地址不可变</strong>。</p><p>我们知道，Java 中 final 修饰一个引用变量时，虽然引用地址不可变，但引用的对象内容是可以更改的。既然如此，我们可以用什么方法修改 value 数组的内容呢？答案呼之欲出，那就是反射了。来看一个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> <span class="token string">&quot; - &quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello World - 166239592</span>

    <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    value<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;J&#39;</span><span class="token punctuation">;</span>
    value<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
    value<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;v&#39;</span><span class="token punctuation">;</span>
    value<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
    value<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;!&#39;</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> <span class="token string">&quot; - &quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello Java! - 166239592</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，通过反射修改了 s1 的 value 引用数组的内容，对于生成的哈希码没有发生变化，<code>System.identityHashCode()</code> 的作用是为给定对象返回与默认方法 <code>hashCode()</code> 返回的哈希码相同的哈希码，无论给定对象的类是否覆盖 <code>hashCode()</code>。</p><p>所以通过反射是切切实实地改变了 String 的内容，但反射行为违背了 String 的设计初衷。String 不可变的设计目的是为了让不可变对象可以安全地在多个线程中共享，而不需要同步，并且能够重用相同的字符串常量，减少内存损耗。而反射修改内容则违背了 String 的设计原则，是一种破坏封装和安全性的行为。换句话说就是，当使用了反射，就已经默认是放弃了 String 本身设计带来的不可变保证，毕竟 String 本身可没有提供任何的 API 或其它手段让开发者能够去修改它，不是吗？</p><p>上述内容主要基于 JDK 8，那么 JDK 9 开始换成的 <code>byte[]</code> 该怎么修改呢？如法炮制吗？勤奋的读者或许已经动手尝试了，但是应该会收一个异常：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Exception in thread &quot;main&quot; java.lang.reflect.InaccessibleObjectException: 
	Unable to make field private final byte[] java.lang.String.value accessible: 
		module java.base does not &quot;opens java.lang&quot; to unnamed module @7c469c48
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),x=n("code",null,"field.setAccessible(true);",-1),D={href:"https://openjdk.org/projects/jigsaw/spec/sotms/",target:"_blank",rel:"noopener noreferrer"},E=e(`<ul><li>类型是 public</li><li>模块导出该类型的包（即控制该包对外可见可访问）</li></ul><p>由于 value 是 <code>private</code> 修饰，不满足上述条件，所以需要通过添加 VM 参数来改变可见性，在启动程序时，添加配置参数：</p><ul><li><code>--add-opens {module name}/{package name}=ALL-UNNAMED</code></li></ul><p><code>ALL-UNNAMED</code> 是指向所有未命名模块开放访问，如果反射代码处于命名模块，可以替换为真实的模块名。我们这里是要访问 String.class，位于 <code>java.base/java.lang</code> 之下，所以完整的参数就是：</p><ul><li><code>--add-opens java.base/java.lang=ALL-UNNAMED</code></li></ul><p>添加参数后再执行代码，就会看到预期的结果了，这里也贴下修改后的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> <span class="token string">&quot; - &quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello World - 400136488</span>

    <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    value<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">74</span><span class="token punctuation">;</span>  <span class="token comment">// J</span>
    value<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>  <span class="token comment">// a</span>
    value<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">118</span><span class="token punctuation">;</span> <span class="token comment">// v</span>
    value<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>  <span class="token comment">// a</span>
    value<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span> <span class="token comment">// !</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> <span class="token string">&quot; - &quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello Java! - 400136488</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-是否线程安全" tabindex="-1"><a class="header-anchor" href="#string-是否线程安全" aria-hidden="true">#</a> String 是否线程安全？</h3><p>毫无疑问，String 肯定是线程安全的。或许大家会联想到 <code>StringBuilder</code> 和 <code>StringBuffer</code> 关于线程安全的说法，进而产生一些关于 String 线程安全的疑惑。事实上，<code>StringBuilder</code> 和 <code>StringBuffer</code> 的线程安全与否是针对它们自身而言，与 String 并无关系。</p><p><code>StringBuilder</code>、<code>StringBuffer</code> 都继承了 <code>AbstractStringBuilder</code> 这个抽象类，在创建这两个对象时，其实都调用了父类的构造函数，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Appendable</span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span>
    <span class="token keyword">byte</span> coder<span class="token punctuation">;</span>
    
    <span class="token class-name">AbstractStringBuilder</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">COMPACT_STRINGS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
            coder <span class="token operator">=</span> <span class="token constant">LATIN1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            value <span class="token operator">=</span> <span class="token class-name">StringUTF16</span><span class="token punctuation">.</span><span class="token function">newBytesFor</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
            coder <span class="token operator">=</span> <span class="token constant">UTF16</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而重点在于 <code>AbstractStringBuilder</code> 中的 <strong>value</strong> 是由它自身定义的。如上所示，它并非像 String 中一样是用 <code>private final</code> 修饰，所以说它是可变的，既然可变，自然就有线程共享的安全问题。而 <code>StringBuffer</code> 则是因为在很多方法上添加了 <code>synchronized</code> 关键字修饰，才保证了线程安全。</p><h2 id="string-在-jvm-中的存储方式" tabindex="-1"><a class="header-anchor" href="#string-在-jvm-中的存储方式" aria-hidden="true">#</a> String 在 JVM 中的存储方式</h2><h3 id="string-对象创建" tabindex="-1"><a class="header-anchor" href="#string-对象创建" aria-hidden="true">#</a> String 对象创建</h3><p>回顾下老知识，Java 从版本 8 开始用「<strong>元空间</strong>」完全替代了「<strong>永久代</strong>」，并且「<strong>字符串常量池</strong>」也挪到了堆中。字符串常量池专门用于存储字符串字面量，它的作用是避免重复创建相同内容的字符串对象，达到内存复用的目的。而所谓的字符串字面量，即代码中直接使用双引号包裹的字符串值，如：<code>String str = &quot;abc&quot;;</code>。</p><p>让我们回到文章开头提出的问题：<code>String abc = new String(&quot;123&quot;);</code> 创建了几个对象？答案是一个或两个。首先代码执行时，会判断 <code>123</code> 这个字符串字面量在字符串常量池是否存在，无则创建，注意这个对象是存于字符串常量池中；接着执行 <code>new String(&quot;123&quot;)</code> 这一步去创建新的 String 实例对象，将常量池中的 <code>123</code> 的引用复制给 String 对象，注意该新对象是存于堆中。如下图所示：</p><figure><img src="`+r+`" alt="JVM 创建字符串对象存储布局" tabindex="0" loading="lazy"><figcaption>JVM 创建字符串对象存储布局</figcaption></figure><p>再说回字符串常量池，它主要是依赖「<strong>StringTable</strong>」进行存储管理。<strong>StringTable</strong> 是 JVM 中的一个哈希表结构，用于存储已经加入到字符串常量池中的字符串对象（比如定义的字符串字面量或通过 <code>String.intern()</code> 创建的字符串），它的主要目的是为了高效管理和查找字符串常量池中的字符串，确保相同内容的字符串只存在一个实例。</p><p>而结构既然是哈希表，大小当然也至关重要，有两个相关的 JVM 参数如下：</p><ul><li><code>-XX:+PrintStringTableStatistics</code>：打印字符串常量池的统计信息</li><li><code>-XX:StringTableSize</code>：设置 StringTable 的长度</li></ul><p>在 JDK 6 及之前的版本，<strong>StringTable</strong> 大小无法调整，默认为 1009，这个值相对较小，在需要大量字符串的情况下，容易造成哈希冲突，影响性能。从 7 开始就允许通过 <code>-XX:StringTableSize</code> 来调整大小，但默认值不变。从 8 开始默认值调整为 60013，从 9 开始默认值进一步增加到 65536，并且也都支持通过参数调整大小。</p><h3 id="string-intern" tabindex="-1"><a class="header-anchor" href="#string-intern" aria-hidden="true">#</a> String.intern()</h3><p>理解了 String 创建时 JVM 内对象的分配后，再进一步的来看看 <code>String.intern()</code> 这个方法，贴下 javadoc 的描述：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 返回字符串对象的规范表示。字符串池最初是空的，由 String 类私有维护。
 * 当调用 intern 方法时，如果池中已包含由 equals(Object) 方法确定的等于此 String 对象的字符串，则返回池中的字符串。
 * 否则，将此 String 对象添加到池中，并返回对此 String 对象的引用。
 * 由此可见，对于任意两个字符串 s 和 t，当且仅当 s.equals(t) 为 true 时，s.intern() == t.intern() 才为 true。
 * 所有文字字符串和字符串值常量表达式都被保留。字符串文字在 Java™ 语言规范的第 3.10.5 节中定义。
 * 返回：与此字符串具有相同内容的字符串，但保证来自唯一字符串池。
 */</span> 
<span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token class-name">String</span> <span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>intern()</code> 是 <strong>native</strong> 方法，调用后会从常量池中查找是否存在一个等于当前 String 对象的字符串，由 <code>equals()</code> 方法确定，存在则返回池中的字符串引用地址，否则将 String 对象添加到池中并返回该 String 对象的引用。因此，当两个字符串 <code>equals()</code> 相等，两者的 <code>intern()</code> 才会相等。</p><p>来看个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// false</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先 s1 定义了字面量 <code>abc</code>，那么在字符串常量池中也就创建了该字符串对象，并持有引用，而 s2 持有的是 String 在堆中的实例对象引用地址。因此直接 <code>==</code> 比较两者则为 <code>false</code>。当 s2 调用 <code>intern()</code> 后会尝试在常量池中创建 <code>abc</code>，由于池中已经有该字符串，所以直接返回 <code>abc</code> 的引用，因此第二个输出则为 <code>true</code>。</p><h2 id="stringbuilder-与-string" tabindex="-1"><a class="header-anchor" href="#stringbuilder-与-string" aria-hidden="true">#</a> StringBuilder 与 String</h2><h3 id="字符追加与创建" tabindex="-1"><a class="header-anchor" href="#字符追加与创建" aria-hidden="true">#</a> 字符追加与创建</h3><p><strong>StringBuilder</strong> 是字符的可变对象，用于高效地拼接和操作字符串，它提供与 StringBuffer 兼容的 API，只是不支持同步，是 StringBuffer 在单线程下的替代，速度要比 StringBuffer 快。</p><p>在这里提到 StringBuilder 是因为其创建字符的方式与 String 有所区别，相信大家用的最多的就是 <code>append()</code> 和 <code>toString()</code> 方法。这里也是要着重讲解下这两个函数，先看下 <code>append()</code> 的源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 注意：以下源码来自 JDK 8，从 9 开始只是换成了 byte[] 并且增加了编码方式的区分操作，本质逻辑是一致的。</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>
    <span class="token comment">// 追加字符串</span>
    <span class="token keyword">public</span> <span class="token class-name">StringBuilder</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 父类 append 字符追加实现</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token function">appendNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>count <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        str<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> value<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        count <span class="token operator">+=</span> len<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token comment">// 字符串追加</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getChars</span><span class="token punctuation">(</span><span class="token keyword">int</span> srcBegin<span class="token punctuation">,</span> <span class="token keyword">int</span> srcEnd<span class="token punctuation">,</span> <span class="token keyword">char</span> dst<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> dstBegin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcBegin <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>srcBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcEnd <span class="token operator">&gt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>srcEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcBegin <span class="token operator">&gt;</span> srcEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>srcEnd <span class="token operator">-</span> srcBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 内容复制</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> srcBegin<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> dstBegin<span class="token punctuation">,</span> srcEnd <span class="token operator">-</span> srcBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>append()</code> 方法的重点就看最后的 <code>String.getChars()</code> 里的 <code>System.arraycopy()</code> 这一行，它直接表明了 <code>append()</code> 方法并不会往字符串常量池里添加字符串对象，而仅仅是把字符串内容复制到 <code>StringBuilder#value</code> 数组里。</p><p>再看看 <code>toString()</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 同样基于 JDK 8</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>
    <span class="token comment">// 重写 toString()</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Create a copy, don&#39;t share the array</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>
    <span class="token comment">// String 构造函数</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&gt;</span> value<span class="token punctuation">.</span>length <span class="token operator">-</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 数组复制</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> offset<span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点同样是最后 String 构造函数调用的 <code>Arrays.copyOfRange</code> 方法，它只是复制了 <code>StringBuilder#value</code> 的内容来创建一个新的数组，并赋值给了 <code>String#value</code> 属性，它并没有真正在字符串常量池中创建字符串对象。</p><p>明白了上面两个方法的实际作用后，来看看下面的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照对 <code>intern()、append()、toString()</code> 三个方法的理解，这里输出应该是 <code>false</code>？emmm...只能说答案是对的，但只对了一半，因为这个问题要分版本来说明。</p><p>其实，<code>intern()</code> 方法有个<strong>首次遇到</strong>原则，在 JDK 6 及之前，该方法会将首次遇到的字符串实例复制到永久代的字符串常量池中存储，返回的也是永久代里该字符串实例的引用；而到了 JDK 7 之后，由于字符串常量池迁移到堆中，就无需再进行复制，只需要在常量池中记录一下首次出现的实例引用即可。</p><p>重新理解 <code>intern()</code> 后，再看上面的代码去思考，如果在 JDK 6，因为 <code>intern()</code> 确实往常量池中复制了字符串对象，所以返回的引用自然就跟 <code>str</code> 这个在堆中的引用不同，输出 <code>false</code>。而在 JDK 7 及之后，输出的将会是 <code>true</code>，因为常量池在堆中，记录的仅仅是首次遇到的字符串实例引用，即堆中的 String 实例引用。</p><p>如果往上面的代码再加上一行代码，变成下面这个样子，读者可思考输出的结果会是什么：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;hellojava&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先说答案，是 <code>false</code>。原因很简单，这是因为 <code>srt2</code> 对字符串字面量先进行了定义，因此该字符串被放入了常量池中，那么 <code>intern()</code> 方法在调用后优先取到的就是池中的字符串引用，与 <code>str</code> 这个堆中的引用比较自然是不同的。如果把 <code>str2</code> 变量的定义放到 <code>println()</code> 语句之后，就会发现输出结果还是 <code>true</code>，读者可自行尝试。</p><blockquote><p><strong>TIPS</strong>：如果是 <code>sb.append(&quot;java&quot;).toString()</code>，那么 <code>sb.intern() == sb</code> 得到结果只会是 <code>false</code>，原因是 <code>java</code> 在 JDK 源码中已被使用定义，所以要注意是否使用了某些 JDK 内部已声明定义的常量。</p></blockquote><h3 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接" aria-hidden="true">#</a> 字符串拼接</h3><p>对于使用 <strong>+</strong> 来拼接的字符串，Java 会分情况来确定是否使用 StringBuilder 进行拼接。像这种：<code>String s = &quot;Hello&quot; + &quot; &quot; + &quot;Java!&quot;</code>，那么编译后会直接拼成 <strong>Hello Java!</strong> 后再放入字符串常量池中。而如果是以下这种情况，就会使用 StringBuilder 了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">&quot;Java!&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后的字节码如下：</p><figure><img src="`+d+'" alt="JDK8-String 拼接字节码" tabindex="0" loading="lazy"><figcaption>JDK8-String 拼接字节码</figcaption></figure><p>可以看到是新建了一个 StringBuilder 并通过 <code>append()</code> 追加字符，最后通过 <code>toString()</code> 来生成 String 对象。因此如果调用 <code>str.intern()</code> 方法，得到的也是跟 <code>str</code> 一样的引用地址。而如果使用 <code>final</code> 修饰 <code>a、b</code> 两个变量，那么也会直接作为字面量拼接在一起，而不是通过 StringBuilder 拼接。</p><p>至于为何使用的是 StringBuilder 而不是 StringBuffer，也是因为前者比起后者性能更好，并且字符串的拼接也大多是在单线程场景下，自然选择最优的方式实现。如果遇到的是多线程环境，开发者也可自行使用 StringBuffer 进行拼接。</p><p>关于字符串的拼接，其实也存在版本上的区分，上述代码编译后的字节码截图是基于 JDK 8，而在 JDK 9 及之后，是如下这样子：</p><figure><img src="'+k+'" alt="JDK11-String 拼接字节码" tabindex="0" loading="lazy"><figcaption>JDK11-String 拼接字节码</figcaption></figure><p>拼接已经不再需要 StringBuilder，可以看到 <code>invokedynamic</code> 指令调度的是 <code>makeConcatWithConstants</code> 方法。<code>makeConcatWithConstants</code> 是在 JDK 9 引入，目的是为了优化字符串的拼接性能，否则在大量字符串拼接上，每次都要去创建 StringBuilder 调用 <code>append()</code> 方法，效率并不理想。</p><p><code>makeConcatWithConstants</code> 针对常量字符串，可以在编译时就将这些字符串进行优化处理，避免运行时的额外拼接开销；对于动态字符串拼接，则会在运行时动态生成拼接逻辑。这比直接使用 StringBuilder 生成更加灵活，并且减少了对象创建，JVM 可以根据实际的运行时情况优化拼接代码。但也要注意该方法最后也是生成的字符串副本，并没有将字符串放入到常量池中。</p><h3 id="最后的问题" tabindex="-1"><a class="header-anchor" href="#最后的问题" aria-hidden="true">#</a> 最后的问题</h3><p><code>String s = new String(&quot;a&quot;) + new String(&quot;b&quot;);</code> 共创建了几个对象？</p><details><summary>思考下再看答案哦~</summary><ul><li><p>在 JDK 8 及之前：共创建了 6 个，堆中一个 StringBuilder 对象、两个 new 创建的 String 对象，常量池中 <code>a</code> 和 <code>b</code> 两个字符串对象，以及最后 <code>StringBuilder#toString</code> 创建的字符数组副本</p></li><li><p>9 之后：共创建了 5 个，堆中两个 new 创建的 String 对象，常量池中 <code>a</code> 和 <code>b</code> 两个字符串对象，以及 <code>makeConcatWithConstants</code> 创建的字符串副本</p></li></ul></details><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',61),F={href:"https://openjdk.org/jeps/254",target:"_blank",rel:"noopener noreferrer"},A={href:"https://docs.oracle.com/javase/specs/jls/se23/html/jls-3.html#jls-3.10.5",target:"_blank",rel:"noopener noreferrer"},C={href:"https://stackoverflow.com/questions/2533097/java-unicode-encoding/2639931#2639931",target:"_blank",rel:"noopener noreferrer"},U={href:"https://stackoverflow.com/questions/36236364/why-does-java-char-use-utf-16",target:"_blank",rel:"noopener noreferrer"},T={href:"https://stackoverflow.com/questions/20945049/is-a-java-string-really-immutable",target:"_blank",rel:"noopener noreferrer"},K={href:"https://stackoverflow.com/questions/41265266/how-to-solve-inaccessibleobjectexception-unable-to-make-member-accessible-m",target:"_blank",rel:"noopener noreferrer"},I={href:"https://book.douban.com/subject/34907497/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://mp.weixin.qq.com/s/MAszOfaRMinhTbLFmxDacQ",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"StringBuilder",-1),M=n("code",null,"String#replace",-1);function L(P,z){const a=o("ExternalLinkIcon");return c(),l("div",null,[m,n("p",null,[s("我们都清楚在 UTF-16 编码下，Java 的 "),g,s(" 类型每个字符占据两个字节。然而在多数实际场景中，String 存储的主要是 "),n("a",b,[s("Latin-1"),t(a)]),s(" 字符集的内容，仅需占用 1 个字节。所以，将原本 1 字节的字符按照 2 字节存储时，内部的 "),h,s(" 数组会有一半空间闲置，这无疑是一种资源浪费。自 JDK 9 起，String 会判断字符串是否全为 ASCII 字符，若满足条件则采用 Latin-1 字符集编码（Latin-1 涵盖了 ASCII 的所有字符），每个字符以一个字节存储，此时 "),f,s(" 不再适用，进而调整为 "),y,s("。")]),S,n("ul",null,[w,n("li",null,[_,s("：同样是针对 Unicode 的可变长度字符编码，但不同的是，其字符编码后的长度只会是 2 或 4 字节，因为 UTF-16 的"),n("a",q,[s("码元"),t(a)]),s("是 16 位。 "),n("ul",null,[n("li",null,[s("若是 "),n("a",B,[s("BMP"),t(a)]),s(" 字符（U+0000 ~ U+FFFF），则采用 2 字节存储；")]),n("li",null,[s("若是 "),n("a",j,[s("SMP"),t(a)]),s(" 字符（U+10000～U+1FFFD），则采用 4 字节存储。对于此类字符，UTF-16 采用代理对来表示，代理对由两个 16 位的码元组成，分为高代理项（U+D800 ~ U+DBFF）和低代理项（U+DC00 ~ U+DFFF），两者共同组成一个 20 位的值，就可以表示 SMP 的 Unicode 码点。")])])])]),J,n("p",null,[s("该异常的出现是由 "),x,s(" 触发，是因为 JDK 9 引入的"),n("a",D,[s("平台模块系统"),t(a)]),s("引起的，特别是其强封装的实现，其限制了 Java 不同模块不同包的访问性，反射自然也受其影响。对于不同包的类型之间的访问，要具备两个条件：")]),E,n("ul",null,[n("li",null,[s("JEP："),n("a",F,[s("JEP 254：Compact Strings"),t(a)])]),n("li",null,[s("Java 语言规范（se23）："),n("a",A,[s("String Literals（字符串字面量 ）"),t(a)])]),n("li",null,[s("stack overflow 关于 Java String 编码及特性相关讨论： "),n("ul",null,[n("li",null,[n("a",C,[s("Java Unicode encoding"),t(a)])]),n("li",null,[n("a",U,[s("Why does java char use UTF-16？"),t(a)])]),n("li",null,[n("a",T,[s("Is a Java string really immutable?"),t(a)])]),n("li",null,[n("a",K,[s(`How to solve InaccessibleObjectException ("Unable to make {member} accessible: module {A} does not 'opens {package}' to {B}") on Java 9?`),t(a)])])])]),n("li",null,[n("a",I,[s("周志明.深入理解Java虚拟机（第3版）"),t(a)]),s(".机械工业出版社，2019. 第二部分第二章 2.4.3")]),n("li",null,[s("微信公众号「阿里云开发者」："),n("a",O,[s("是什么让一段20行代码的性能提升了10倍"),t(a)]),s("（理解 "),N,s(" 与 "),M,s(" 在使用性能上的区别）")])])])}const W=p(v,[["render",L],["__file","java-string.html.vue"]]);export{W as default};
