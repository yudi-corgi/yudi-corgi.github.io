import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,b as c,o as d}from"./app-lbP2pTVN.js";const n="/assets/tcp-%E5%8D%8F%E8%AE%AE%E5%A4%B4%E7%BB%93%E6%9E%84-C7jenDxD.png",a="/assets/tcp-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B-Bt0plynF.png",r="/assets/tcp-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B-C9D8yDGI.png",i="/assets/tcp-%E4%B8%A4%E6%AC%A1%E6%8C%A5%E6%89%8B-RI6vwPD-.png",s="/assets/tcp-%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA-Ce0GcQvu.png",l="/assets/tcp-time-wait-%E5%BD%B1%E5%93%8D%E7%A4%BA%E6%84%8F%E5%9B%BE-BSr1dMhR.png",p="/assets/tcp-sack-%E7%AE%80%E8%A6%81%E6%B5%81%E7%A8%8B-DhSxFm6i.png",g="/assets/tcp-d-sack-%E7%AE%80%E8%A6%81%E6%B5%81%E7%A8%8B-aTR2E7xx.png",h={};function m(C,e){return d(),o("div",null,e[0]||(e[0]=[c('<blockquote><p>note：本篇是关于 TCP 的知识点记录，会比较琐碎。</p></blockquote><h2 id="基础认识" tabindex="-1"><a class="header-anchor" href="#基础认识"><span>基础认识</span></a></h2><p><strong>TCP（Transmission Control Protocol）</strong>：传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议；是为了在不可靠的互联网络上提供可靠的端到端字节流而专门设计的一个传输协议；TCP 位于网络 OSI 七层模型中的第四层 Transport（传输）层。</p><figure><img src="'+n+'" alt="TCP 协议头结构" tabindex="0" loading="lazy"><figcaption>TCP 协议头结构</figcaption></figure><p>一个 TCP 连接需要四元组来表示同一个连接，即源 IP（<code>src_ip</code>）、源端口（<code>src_port</code>）、目标 IP（<code>dst_ip</code>）、目标端口（<code>dst_port</code>）；但其实还有一个协议，即五元组，而若仅考虑 TCP，则是四元组。</p><p>关键参数：</p><ul><li><code>Sequence Number</code>：seq 序号，32 位，用来标识从 TCP 源端向目的端发送的字节流，发起方发送数据时对此进行标记，用于解决网络包乱序（reordering）问题</li><li><code>Acknowledgement Number</code>：<code>ack</code> 确认序号，32 位，当 <code>ACK</code> 标志位为 1 时确认序号才有效（<code>ack = seq + 1</code>），可用于解决丢包的问题，同时也表达了接收端希望接收的下一个数据包的起始 <code>seq</code> 序号</li><li><code>Window</code>：又称 <code>Advertised-Window</code>，即滑动窗口（Sliding Window），用于解决流控</li><li><code>TCP Flag</code>：数据包（报文段）的类型，用于操控 <a href="#%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA">TCP 有限状态机</a>，关键标志位如下： <ul><li><code>URG</code>：紧急指针（urgent pointer），置为 1 表示启用了优先数据传输功能，数据不会存入缓冲区，而是直接发送给目标应用程序（即使缓冲区有数据）</li><li><code>ACK</code>：确认序号有效（注意与确认序号 <code>ack</code> 的区别，仅当标志位的 <code>ACK=1</code> 时，确认序号 <code>ack</code> 才有效，连接建立后所有报文都需要将该标志位 <code>ACK</code> 置 1）</li><li><code>PSH</code>：表示消息应当立即被「推送」，当标志位置为 1 时，<code>PSH</code> 报文段会放在缓冲区的末尾，然后立马将数据交付给目标应用程序，而无需等到缓冲区填满，使用场景：telnet、FTP（文件传输）</li><li><code>RST</code>：重建连接</li><li><code>SYN</code>：发起一个新连接</li><li><code>FIN</code>：释放一个连接</li></ul></li></ul><blockquote><p>note：下文标志位全部大写表示，非标志位则小写表示</p></blockquote><p>在网络当中的通信模式有以下两种：</p><ul><li><strong>单工</strong>（Simplex）：指数据传输只支持数据在一个方向上传输（HTTP 1.1）</li><li><strong>双工</strong>（Duplex）：指二台通讯设备之间，允许有双向的数据传输，即发送和接收皆可，可细分为： <ul><li><strong>半双工</strong>（Half-Duplex）：允许二台设备之间的双向数据传输，但不能同时进行</li><li><strong>全双工</strong>（Full-Duplex）：允许二台设备间同时进行双向数据传输（HTTP 2.0、TCP、WebSocket）</li></ul></li></ul><h2 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手"><span>三次握手</span></a></h2><p><strong>概念</strong>：三次握手（Three-Way-Handshake）即建立 TCP 连接，一个 TCP 连接的创建需要客户端和服务端总共发送 3 个包才能完成。</p><figure><img src="'+a+'" alt="TCP 三次握手" tabindex="0" loading="lazy"><figcaption>TCP 三次握手</figcaption></figure><ol><li>第一次握手：Client 将标志位 <code>SYN</code> 置为 1，随机产生一个值 <code>seq=x</code>，并将该数据包发送给 Server，Client 进入 <code>SYN_SENT</code> 状态，等待 Server 确认</li><li>第二次握手：Server 收到数据包后由标志位 <code>SYN=1</code> 知道 Client 请求建立连接，Server 将标志位 <code>SYN</code> 和 <code>ACK</code> 都置为 1，<code>ack=x+1</code>，随机产生一个值 <code>seq=y</code>，并将该数据包发送给 Client 以确认连接请求，Server 进入 <code>SYN_RCVD</code> 状态</li><li>第三次握手： <ul><li>Client 收到确认后，检查 <code>ack</code> 是否为 x+1，<code>ACK</code> 是否为 1，如果正确则将标志位 <code>ACK</code> 置为 1，<code>ack=y+1</code>，并将该数据包发送给 Server，然后将状态修改为 <code>ESTABLISHED</code></li><li>Server 收到数据包后检查 <code>ack</code> 是否为 y+1，<code>ACK</code> 是否为 1，如果正确则连接建立成功，Server 进入 <code>ESTABLISHED</code> 状态，完成三次握手，随后 Client 与 Server 即可开始传输数据</li></ul></li></ol><p><strong>三次握手的目的</strong>：主要是为了初始化 <code>seq</code> 的初始值，通信双方需要互相通知对方自己初始化的 <code>seq</code>（即 <code>ISN - Inital Sequence Number</code>），所以叫 <code>SYN - Synchronize Sequence Numbers</code>（注意：这里的 SYN 不是指标志位的 <code>SYN</code>，而是字面意思的同步序号），即握手流程中的序号 x 和 y，这两个序号会作为以后数据通信的序号，以保证应用层接收到的数据不会因为网络上的传输的问题而乱序（TCP 会用这个序号来拼接数据）。</p><h3 id="半连接与全连接" tabindex="-1"><a class="header-anchor" href="#半连接与全连接"><span>半连接与全连接</span></a></h3><p><strong>半连接队列</strong>（SYN queue）：在三次握手过程中，Server 发送 <code>SYN - ACK</code> 之后，收到 Client 的 <code>ACK</code> 之前的 TCP 连接称为<strong>半连接（half-open connect）</strong>，此时 Server 处于 <code>SYN_RCVD</code> 状态，这些连接会存放在半连接队列中。</p><p><strong>全连接队列</strong>（accepet queue）：第三次握手中 Server 收到 Client 的 <code>ACK</code> 后，内核会把连接从 SYN queue（半连接队列）移除，然后创建新的<strong>全连接</strong>，并添加到 accept queue（全连接队列），等待进程调用 accept 函数时把连接取出来。</p><p><strong>SYN 攻击</strong>：攻击者短时间伪造不同 IP 地址的 <code>SYN</code> 报文，服务端每接收到一个 <code>SYN</code> 报文，就进入 <code>SYN_RCVD</code> 状态，但服务端发送出去的 <code>ACK + SYN</code> 报文，无法得到未知 IP 主机的 <code>ACK</code> 应答，久而久之就会占满服务端的半连接队列，使得服务器不能为正常用户服务。</p><p>关于 <strong>SYN 攻击防御</strong>可以看看 <a href="https://www.xiaolincoding.com/network/3_tcp/tcp_interview.html#%E4%BB%80%E4%B9%88%E6%98%AF-syn-%E6%94%BB%E5%87%BB-%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D-syn-%E6%94%BB%E5%87%BB" target="_blank" rel="noopener noreferrer">SYN 攻击与避免方式</a>，关键参数是 <code>tcp_syncookies</code>，本意是当 SYN queue 满后 TCP 会通过 <code>src_port、dest_port</code> 和时间戳构建一个特殊的 <code>seq</code>（又叫 <code>cookie</code>）返回给 Client（第二次握手时），若是攻击者则不会有响应，若是正常连接则会携带该 <code>cookie</code>，Server 只要验证该 <code>cookie</code> 即可建立连接（即使该连接不存在于 SYN queue）。</p><h2 id="四次挥手" tabindex="-1"><a class="header-anchor" href="#四次挥手"><span>四次挥手</span></a></h2><p><strong>概念</strong>：四次挥手（Four-Way Wavehand）即终止 TCP 连接，就是指断开一个 TCP 连接时，需要客户端和服务端总共发送 4 个包以确认连接的断开</p><h3 id="一方主动关闭-另一方被动关闭过程" tabindex="-1"><a class="header-anchor" href="#一方主动关闭-另一方被动关闭过程"><span>一方主动关闭，另一方被动关闭过程</span></a></h3><figure><img src="'+r+'" alt="TCP 四次挥手" tabindex="0" loading="lazy"><figcaption>TCP 四次挥手</figcaption></figure><ol><li>第一次挥手：Client 发送一个 <code>FIN</code>，用来关闭 Client 到 Server 的数据传送，Client 进入 <code>FIN_WAIT_1</code> 状态</li><li>第二次挥手：Server 收到 <code>FIN</code> 后，发送一个 <code>ACK</code> 给 Client，确认序号 <code>ack</code> 为收到的 <code>seq+1</code>（与 <code>SYN</code> 相同，一个 <code>FIN</code> 占用一个序号），Server 进入 <code>CLOSE_WAIT</code> 状态，Client 收到 <code>ack</code> 后进入 <code>FIN_WAIT_2</code> 状态</li><li>第三次挥手：Server 发送一个 <code>FIN</code>，用来关闭 Server 到 Client 的数据传送，Server 进入 <code>LAST_ACK</code> 状态</li><li>第四次挥手：Client 收到 <code>FIN</code> 后，Client 进入 <code>TIME_WAIT</code> 状态，接着发送一个 <code>ACK</code> 给 Server，确认序号为收到的 <code>seq+1</code>，Server 进入 <code>CLOSED</code> 状态，完成四次挥手</li></ol><h3 id="双方同时发起关闭过程" tabindex="-1"><a class="header-anchor" href="#双方同时发起关闭过程"><span>双方同时发起关闭过程</span></a></h3><figure><img src="'+i+'" alt="TCP 两次挥手" tabindex="0" loading="lazy"><figcaption>TCP 两次挥手</figcaption></figure><ol><li>第一次挥手：Client 与 Server 同时向对方发送 <code>FIN</code>，并进入 <code>FIN_WAIT_1</code> 状态，双方收到 <code>FIN</code> 后转为 <code>CLOSING</code> 状态</li><li>第二次挥手：Client 与 Server 互相向对方发送 <code>ACK</code>，双方收到后进入 <code>TIME_WAIT</code> 状态</li></ol><p>从双方同时发起关闭操作的角度看，关闭连接就只有两次挥手，因为 TCP 是全双工协议，而且 Client 与 Server 两端都需要 <code>FIN</code> 和 <code>ACK</code>，只不过有一方是被动的，所以看起来就是四次挥手，若两边同时断开连接，那就都会进入 <code>CLOSING</code> 状态，进而变成 <code>TIME_WAIT</code> 状态。</p><h2 id="有限状态机" tabindex="-1"><a class="header-anchor" href="#有限状态机"><span>有限状态机</span></a></h2><p>在 TCP 协议下，有限状态机（<strong><em>Finite State Machine</em></strong>）用于描述连接的「<strong>生命阶段（Life Stages）</strong>」。一个 TCP 设备与另一个 TCP 设备之间的每个连接都以没有连接的空（null）状态开始，然后经过一系列状态，直到建立连接。接着它保持在该（连接）状态，直到发生某些事情导致连接再次关闭，此时它继续通过另一系列过渡状态并返回到关闭状态。</p><h3 id="相关概念" tabindex="-1"><a class="header-anchor" href="#相关概念"><span>相关概念</span></a></h3><p>以下三个缩写用于控制状态之间转换的三种类型的消息，对应于设置的 TCP 头标志位，以表示消息正在服务该功能：</p><ul><li><code>SYN</code>：同步消息，用于启动和建立连接，如此命名是因为它的功能之一是在设备之间同步序列号（<code>seq</code>）</li><li><code>FIN</code>：完成消息，它是一个设置了 <code>FIN</code> 位的 TCP 段（Segment），表示设备要终止连接</li><li><code>ACK</code>：确认消息，表示收到一条消息，例如一个 <code>SYN</code> 或一个 <code>FIN</code></li></ul><p><code>TCB（Transfer control block）</code>：传输控制块，用于存储有关连接的重要信息，如两个套接字号和指向发送-接收缓存区的指针，TCB 也用于实现滑动窗口机制，其保存跟踪接收和确认的字节数、接收和尚未确认的字节数、当前窗口大小等的变量，每个 TCP 连接都有自己的 TCB。</p><ul><li><code>Active OPEN</code>：主动/活动 OPEN，使用 TCP 的客户端进程即为主动方，并通过实际发送 TCP 消息来启动连接（SYN 消息）</li><li><code>Passive OPEN</code>：被动 OPEN，表示服务端进程正在侦听，等待客户端通过指定端口与其建立连接</li><li>创建时机：建立 TCP 连接的过程开始之前，每一端的设备必须执行一些「准备工作」，其中之一就是创建 TCB，是在连接建立过程的一开始就完成，即设备刚刚转换出 <code>CLOSED</code> 状态时</li><li>销毁时机：连接完全终止并且设备转回 <code>CLOSED</code> 状态时销毁</li><li>TCB 与连接关联方式： <ul><li>Client 已知其访问的客户端与服务端进程的 IP 与 Port，因此可使用这些唯一标识来定位关联的 TCB</li><li>Server 实际是处于监听状态，并不清楚哪个 Client 会来连接，并且几乎可同时被多个 Client 连接，所以 Server 会创建一个带有未指定（0）的 Client 套接字号的 TCB，并等待接收到（主动）OPEN，然后将 Client 套接字号绑定到 TCB 以作为连接过程的一部分以进行被动 OPEN，为了允许处理多个传入连接，Server 进程实际上可能同时执行几个未指定的被动 OPEN</li><li>套接字号（Socket Number）：IPv4 地址和端口号的组合称为套接字号，一个套接字号可以在整个互联网中唯一标识一个网络资源</li></ul></li></ul><h3 id="状态图与状态表" tabindex="-1"><a class="header-anchor" href="#状态图与状态表"><span>状态图与状态表</span></a></h3><figure><img src="'+s+'" alt="TCP 有限状态机图示" tabindex="0" loading="lazy"><figcaption>TCP 有限状态机图示</figcaption></figure><table><thead><tr><th style="text-align:center;">状态</th><th style="text-align:left;">状态描述</th><th style="text-align:left;">事件与过渡</th></tr></thead><tbody><tr><td style="text-align:center;"><code>CLOSED</code></td><td style="text-align:left;">每个连接在建立过程开始之前开始的默认状态，在标准中也称为「虚构（fictional）」，因为该状态表示设备之间没有连接，要么尚未创建，要么刚刚被销毁</td><td style="text-align:left;"><strong>Passive OPEN</strong>：服务器通过在 TCP 端口上进行被动打开来开始连接设置过程。同时，它建立了管理连接所需的数据结构（<a href="http://www.tcpipguide.com/free/t_TCPConnectionPreparationTransmissionControlBlocksT.htm" target="_blank" rel="noopener noreferrer">传输控制块或TCB</a>），然后它转换到 <code>LISTEN</code> 状态<br><strong>Active OPEN，发送 SYN</strong>：客户端通过发送 <code>SYN</code> 消息开始连接建立，并为此连接建立 TCB。然后它转换到 <code>SYN-SENT</code> 状态</td></tr><tr><td style="text-align:center;"><code>LISTEN</code></td><td style="text-align:left;">设备（通常是服务器）正在等待接收来自客户端的同步（<code>SYN</code>）消息，它还没有发送自己的 <code>SYN</code> 消息</td><td style="text-align:left;"><strong>接收客户端 SYN，发送 SYN+ACK</strong>：服务器设备接收来自客户端的 <code>SYN</code>，它发回一条包含自己的 <code>SYN</code> 的消息，并确认它收到的消息（<code>ACK</code>），服务器进入 <code>SYN-RECEIVED</code> 状态</td></tr><tr><td style="text-align:center;"><code>SYN-SENT</code></td><td style="text-align:left;">客户端已发送同步（SYN）消息，并正在等待来自其他设备（通常是服务器）的匹配 <code>SYN</code></td><td style="text-align:left;"><strong>接收 SYN，发送 ACK</strong>：如果发送了 <code>SYN</code> 消息的设备从其他设备接收到 <code>SYN</code>，但没有收到自己 <code>SYN</code> 的 <code>ACK</code>，它会确认收到的 <code>SYN</code>，然后转换到 <code>SYN-RECEIVED</code> 以等待确认它的 <code>SYN</code><br><strong>接收 SYN+ACK，发送 ACK</strong>：如果发送 <code>SYN</code> 的设备同时收到对其 <code>SYN</code> 的确认以及来自其他设备的 <code>SYN</code>，它会确认收到的 <code>SYN</code>，然后直接进入 <code>ESTABLISHED</code> 状态</td></tr><tr><td style="text-align:center;"><code>SYN-RECEIVED</code></td><td style="text-align:left;">设备既收到了来自其伙伴的 <code>SYN</code>（连接请求），又发送了自己的 <code>SYN</code>，它现在正在等待对其 <code>SYN</code> 的 <code>ACK</code> 以完成连接设置</td><td style="text-align:left;"><strong>接收 ACK</strong>：当设备接收到它发送的 <code>SYN</code> 的 <code>ACK</code> 时，它会转换到 <code>ESTABLISHED</code> 状态</td></tr><tr><td style="text-align:center;"><code>ESTABLISHED</code></td><td style="text-align:left;">打开的 TCP 连接的「稳定状态（steady state）」，一旦连接中的两个设备都进入此状态，就可以自由交换数据，这将一直持续到连接因某种原因关闭</td><td style="text-align:left;"><strong>关闭、发送 FIN</strong>：设备可以通过发送带有 <code>FIN</code>（完成）位的消息来关闭连接，并转换到 <code>FIN-WAIT-1</code> 状态<br><strong>接收 FIN</strong>：设备可能会收到来自其连接设备的 <code>FIN</code> 消息，要求关闭连接，它将确认此消息并转换到 <code>CLOSE-WAIT</code> 状态</td></tr><tr><td style="text-align:center;"><code>CLOSE-WAIT</code></td><td style="text-align:left;">设备已收到来自其他设备的关闭请求（<code>FIN</code>），现在必须等待本地设备上的应用程序确认此请求并生成匹配请求</td><td style="text-align:left;"><strong>关闭、发送 FIN</strong>：使用 TCP 的应用程序在被告知其他进程想要关闭后，向正在运行它的机器上的 TCP 层发送关闭请求，然后 TCP 向已经要求终止连接的远程设备发送一个 <code>FIN</code>，然后转换到 <code>LAST-ACK</code></td></tr><tr><td style="text-align:center;"><code>LAST-ACK</code></td><td style="text-align:left;">已收到关闭请求并确认的设备已发送自己的 <code>FIN</code> 并正在等待此请求的 <code>ACK</code></td><td style="text-align:left;"><strong>为 FIN 接收 ACK</strong>：设备收到其关闭请求（<code>FIN</code>）的确认，并收到了另一个设备的 <code>FIN</code> 并确认了它，进入 <code>CLOSED</code> 状态</td></tr><tr><td style="text-align:center;"><code>FIN-WAIT-1</code></td><td style="text-align:left;">处于此状态的设备正在等待其发送的 <code>FIN</code> 的 <code>ACK</code>，或者正在等待来自其他设备的连接终止请求</td><td style="text-align:left;"><strong>为 FIN 接收 ACK</strong>：设备收到其关闭请求（<code>FIN</code>）的确认，转换到 <code>FIN-WAIT-2</code> 状态<br><strong>接收 FIN，发送 ACK</strong>：设备不接收自己 <code>FIN</code> 的 <code>ACK</code>，而是接收来自其他设备的 <code>FIN</code>，它确认该 <code>FIN</code>，并进入 <code>CLOSING</code> 状态</td></tr><tr><td style="text-align:center;"><code>FIN-WAIT-2</code></td><td style="text-align:left;">处于此状态的设备已收到终止连接请求的 <code>ACK</code>，现在正在等待来自其它设备的匹配 <code>FIN</code></td><td style="text-align:left;"><strong>接收 FIN、发送 ACK</strong>：设备从其它设备接收 <code>FIN</code>，确认后进入 <code>TIME-WAIT</code> 状态</td></tr><tr><td style="text-align:center;"><code>CLOSING</code></td><td style="text-align:left;">该设备已收到来自其他设备的 <code>FIN</code> 并为其发送了 <code>ACK</code>，但尚未收到自己的 <code>FIN</code> 消息的 <code>ACK</code></td><td style="text-align:left;"><strong>为 FIN 接收 ACK</strong>：设备收到其关闭请求（<code>FIN</code>）的确认，转换到 <code>TIME-WAIT</code> 状态</td></tr><tr><td style="text-align:center;"><code>TIME-WAIT</code></td><td style="text-align:left;">该设备现在已经从另一个设备接收到一个 <code>FIN</code> 并对其进行确认，并发送了自己的 <code>FIN</code> 并收到了一个 <code>ACK</code>，除了等待确保收到 <code>ACK</code> 并防止与新连接的潜在重叠（关于该状态的详细请参阅 <a href="http://www.tcpipguide.com/free/t_TCPConnectionTermination.htm" target="_blank" rel="noopener noreferrer">TCP 连接终止</a>）</td><td style="text-align:left;"><strong>Timer Expiration</strong>：在指定的等待期（<strong>2MSL</strong>）后，设备转换到 <code>CLOSED</code> 状态</td></tr></tbody></table><h3 id="time-wait-状态说明" tabindex="-1"><a class="header-anchor" href="#time-wait-状态说明"><span>TIME-WAIT 状态说明</span></a></h3><p>相关概念：</p><ul><li><code>MSL（Maximum Segment Lifetime）</code>：是构成 TCP 协议一部分的数据报的任何段在被丢弃之前在网络上保持有效的最大时间，默认是 2 分钟，此时间限制最终受用于传输 TCP 段的 IP 数据报中的 TTL 字段的限制</li><li><code>MTU（Maximum Transmission Unit）</code>：最大传输单元，一个网络包（帧）的最大长度，即发送方能接收的有效负载，以太网中一般为 1500 字节，超过的话在进入到路由器时会被拒绝转发</li><li><code>MSS（Maximum Segment Size）</code>：最大报文长度，除去 IP 和 TCP 头部之后，一个网络包所能容纳的 TCP 数据的最大长度，若 HTTP 请求数据过长，超过 MSS 长度，则 TCP 会把数据拆成多个的数据包发送，而不是一次性发送所有数据，也就是拆包</li><li><code>TCP.SO_REUSEADDR</code>：该参数用于设置当一个端口处于 <code>TIME_WAIT</code> 状态时，不用等待时间结束就可以直接进入使用模式</li></ul><h4 id="该状态存在的问题" tabindex="-1"><a class="header-anchor" href="#该状态存在的问题"><span>该状态存在的问题</span></a></h4><p><code>TIME-WAIT</code> 状态的持续时间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>∗</mo><mi>M</mi><mi>S</mi><mi>L</mi></mrow><annotation encoding="application/x-tex">2*MSL</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">MS</span><span class="mord mathnormal">L</span></span></span></span>，也就是默认 4 分钟，TCP 连接中的一个套接字被干净地关闭将保持 <code>TIME_WAIT</code> 状态大约 4 分钟。如果许多连接被快速打开和关闭，则 <code>TIME_WAIT</code> 中的套接字可能会开始在系统上累积，若累积过多，会导致本地可用端口缺失而无法建立新连接。</p><h4 id="该状态存在的原因" tabindex="-1"><a class="header-anchor" href="#该状态存在的原因"><span>该状态存在的原因</span></a></h4><figure><img src="'+l+'" alt="TIME-WAIT 影响图示" tabindex="0" loading="lazy"><figcaption>TIME-WAIT 影响图示</figcaption></figure><ol><li><p>防止来自一个连接的延迟段被误解为后续连接的一部分，当连接处于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>∗</mo><mi>M</mi><mi>S</mi><mi>L</mi></mrow><annotation encoding="application/x-tex">2*MSL</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">MS</span><span class="mord mathnormal">L</span></span></span></span>​ 等待状态时到达的任何段都将被丢弃</p><ul><li>在上图中，有两个从端点 1 到端点 2 的连接，每个端点的地址和端口在每个连接中都是相同的，第一个连接以端点 2 发起的主动关闭而终止，如果端点 2 没有在 <code>TIME_WAIT</code> 中保持足够长的时间以确保来自先前连接的所有段都已失效，那么延迟段（具有适当的序列号）可能被误认为是第二个连接的一部分</li><li>延迟的段不太可能导致这样的问题。首先，每个终点的地址和端口都必须相同，这通常不太可能，因为客户端的端口通常是由操作系统从临时端口范围中选择，因此在连接之间会发生变化。其次，延迟段的序列编号（seq）需要在新连接中有效，这也不太可能。但是，如果这两种事情都发生了，那么 <code>TIME_WAIT</code> 将阻止新连接的数据损坏</li></ul></li><li><p>可靠地实现 TCP 的全双工连接终止：假设客户端先发起 <code>FIN</code>，那么在服务端发送 <code>FIN</code> 后，没有收到 <code>ACK</code>，就会导致服务端重发 <code>FIN</code>，若没有 <code>TIME-WAIT</code>，让连接直接进入 <code>CLOSED</code> 状态，那么会导致服务端收到的响应是 <code>RST</code>，这将导致服务端发生错误，即使数据正确传输</p></li></ol><h2 id="重传机制" tabindex="-1"><a class="header-anchor" href="#重传机制"><span>重传机制</span></a></h2><h3 id="超时重传" tabindex="-1"><a class="header-anchor" href="#超时重传"><span>超时重传</span></a></h3><p><strong>超时重传</strong>指经过 RTO 时间后未收到接收方的 ACK 便重传数据报文。</p><ul><li><code>RTT（Round Trip Time）</code>：即一个数据包从发出去到回来的时间。</li><li><code>RTO（Retransmission TimeOut）</code>：超过 RTO 设置的时间没有收到 ack，数据包就会重发，通过 RTT 来控制 RTO 时间。</li></ul><p>存在的问题：</p><ol><li>基于时间维度，当一个报文段丢失时，需要等待一定的超时周期后才会重传，增加了端到端的时延</li><li>当一个报文段丢失时，在其等待超时的过程中，在其之后的报文段已经被接收端接收但却迟迟得不到 ACK，发送端会认为也丢失了，从而引起不必要的重传，既浪费资源也浪费时间</li></ol><h3 id="快速重传" tabindex="-1"><a class="header-anchor" href="#快速重传"><span>快速重传</span></a></h3><p><strong>快速重传</strong>机制不以时间驱动，而是以数据驱动，基于接收端的反馈信息（<code>ACK</code>）来引发重传。</p><p>假设发送 6 个报文，<code>seq</code> 分别是 1~6，其中只有 <code>seq=3</code> 未收到 <code>ACK</code>，那么接收方后续收到 <code>seq=4/5/6</code> 时，<code>ACK</code> 也会是 3，发送方便可得知 <code>seq=3</code> 的报文需要重传。</p><p>存在的问题：<code>ACK</code> 只向发送端告知最大的有序报文段，但具体丢失的报文段是哪个并不清楚，比如上述例子，可能丢失的是 <code>seq=3</code>，也可能是 <code>seq=4/5/6</code> 都丢失了</p><h3 id="sack" tabindex="-1"><a class="header-anchor" href="#sack"><span>SACK</span></a></h3><p><strong>SACK</strong>（Selective ACK）是带选择确认的重传，在快速重传的基础上，接收端返回最近收到的报文段的序列号范围，发送端便知道该重传哪些报文段。</p><figure><img src="'+p+'" alt="SACK 简要流程" tabindex="0" loading="lazy"><figcaption>SACK 简要流程</figcaption></figure><h3 id="d-sack" tabindex="-1"><a class="header-anchor" href="#d-sack"><span>D-SACK</span></a></h3><p><strong>D-SACK</strong>（Duplicate SACK）在 SACK 的基础上作扩展，用于告诉发送方，接受方自己哪些数据重复接收了。</p><figure><img src="'+g+'" alt="D-SACK 简要流程" tabindex="0" loading="lazy"><figcaption>D-SACK 简要流程</figcaption></figure><h2 id="滑动窗口-拥塞控制" tabindex="-1"><a class="header-anchor" href="#滑动窗口-拥塞控制"><span>滑动窗口 &amp; 拥塞控制</span></a></h2><p><code>滑动窗口（Sliding Window）</code>：TCP 头里有个字段叫 <code>Window</code>（<code>Advertised-Window</code>），这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据，于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来，也就是流控。</p><p><code>拥塞处理（Congestion Handling）</code>：就是在网络中发生拥塞时，减少向网络中发送数据的速度，防止造成恶性循环；同时在网络空闲时，提高发送数据的速度，最大限度地利用网络资源。</p><p><code>网络拥塞</code>：网络中的数据太多，导致某个路由器处理不过来或处理的太慢。路由器的内存是有限的，若同一时间到达某个路由器的数据太多，这个路由器将无法接收所有的数据，只能将一部分丢弃；或者同一台路由器数据太多，后面到达的数据将要等待较长的时间才会被转发。</p><p>拥塞控制的四个算法：</p><ol><li>慢启动</li><li>拥塞避免</li><li>拥塞发生</li><li>快速恢复</li></ol><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ol><li><a href="https://zhuanlan.zhihu.com/p/504695779" target="_blank" rel="noopener noreferrer">知乎 - TCP 分段 &amp; IP 分片</a></li><li><a href="https://www.xiaolincoding.com/network/3_tcp/tcp_queue.html" target="_blank" rel="noopener noreferrer">小林coding - TCP 半连接队列和全连接（包含监控与修改方式）</a></li><li><a href="http://www.tcpipguide.com/index.htm" target="_blank" rel="noopener noreferrer">TCP / IP 向导</a></li><li><a href="http://www.tcpipguide.com/free/t_TCPImmediateDataTransferPushFunction.htm" target="_blank" rel="noopener noreferrer">TCP 推送功能描述</a></li><li><a href="http://www.tcpipguide.com/free/t_TCPPriorityDataTransferUrgentFunction-2.htm" target="_blank" rel="noopener noreferrer">TCP 优先传输数据功能描述</a></li><li><a href="http://www.tcpipguide.com/free/t_TCPConnectionEstablishmentProcessTheThreeWayHandsh-3.htm" target="_blank" rel="noopener noreferrer">TCP 连接建立 - 三次握手描述</a></li><li><a href="http://www.tcpipguide.com/free/t_TCPConnectionEstablishmentSequenceNumberSynchroniz.htm" target="_blank" rel="noopener noreferrer">TCP 连接建立序列号（seq）同步和参数交换以及问题分析</a></li><li><a href="http://www.tcpipguide.com/free/t_TCPConnectionTermination-2.htm" target="_blank" rel="noopener noreferrer">TCP 连接关闭描述</a></li><li><a href="http://www.tcpipguide.com/free/t_TCPMessageSegmentFormat-3.htm" target="_blank" rel="noopener noreferrer">TCP 消息段格式（结构）</a></li><li><a href="http://www.tcpipguide.com/free/t_TCPOperationalOverviewandtheTCPFiniteStateMachineF-2.htm" target="_blank" rel="noopener noreferrer">TCP 有限状态机（FSM）</a></li><li><a href="http://www.serverframework.com/asynchronousevents/2011/01/time-wait-and-its-design-implications-for-protocols-and-scalable-servers.html" target="_blank" rel="noopener noreferrer">TIME-WAIT 和它的设计对协议和可扩展服务器的影响</a></li><li><a href="https://coolshell.cn/articles/22263.html" target="_blank" rel="noopener noreferrer">陈皓 - 从一次经历谈 TIME_WAIT 的那些事</a></li><li><a href="https://vincent.bernat.ch/en/blog/2014-tcp-time-wait-state-linux" target="_blank" rel="noopener noreferrer">在繁忙的 Linux 服务器上处理 TCP TIME-WAIT 状态</a></li><li><a href="https://www.omnisecu.com/tcpip/what-are-port-and-socket-numbers.php#:~:text=The%20combination%20of%20an%20IPv4%20address%20and%20a,identify%20a%20network%20resource%20in%20the%20whole%20internet." target="_blank" rel="noopener noreferrer">OmniSecu</a>（同样是网络协议的科普网站）</li><li><a href="http://www.52im.net/thread-515-1-1.html" target="_blank" rel="noopener noreferrer">52IM - 深入理解TCP协议（下）：RTT、滑动窗口、拥塞处理</a></li><li><a href="https://www.cnblogs.com/tuyang1129/p/12439862.html" target="_blank" rel="noopener noreferrer">计算机网络——TCP的拥塞控制（超详细）</a></li></ol>',71)]))}const f=t(h,[["render",m]]),u=JSON.parse('{"path":"/posts/distribute/tcp.html","title":"TCP 杂谈","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"TCP 杂谈","description":"记录 TCP 琐碎的知识点","tag":["TCP/IP","网络"],"date":"2024-05-12T00:00:00.000Z","sticky":true,"category":["TCP","网络"],"cover":"/assets/images/minions_cover20.jpg","icon":"fluent:protocol-handler-24-regular","isOriginal":true,"star":true,"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TCP 杂谈\\",\\"image\\":[\\"https://blog.yudi-corgi.site/assets/images/minions_cover20.jpg\\"],\\"datePublished\\":\\"2024-05-12T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-11T03:35:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"YUDI-Corgi\\",\\"url\\":\\"https://github.com/yudi-corgi\\"}]}"],["meta",{"property":"og:url","content":"https://blog.yudi-corgi.site/posts/distribute/tcp.html"}],["meta",{"property":"og:site_name","content":"Black Hole"}],["meta",{"property":"og:title","content":"TCP 杂谈"}],["meta",{"property":"og:description","content":"记录 TCP 琐碎的知识点"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://blog.yudi-corgi.site/assets/images/minions_cover20.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-11T03:35:55.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://blog.yudi-corgi.site/assets/images/minions_cover20.jpg"}],["meta",{"name":"twitter:image:alt","content":"TCP 杂谈"}],["meta",{"property":"article:tag","content":"网络"}],["meta",{"property":"article:tag","content":"TCP/IP"}],["meta",{"property":"article:published_time","content":"2024-05-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-11T03:35:55.000Z"}]]},"git":{"createdTime":1748276320000,"updatedTime":1749612955000,"contributors":[{"name":"YUDI-Corgi","username":"YUDI-Corgi","email":"1019509861@qq.com","commits":1,"url":"https://github.com/YUDI-Corgi"},{"name":"yudi-corgi","username":"yudi-corgi","email":"1019@qq.com","commits":1,"url":"https://github.com/yudi-corgi"}]},"readingTime":{"minutes":19.25,"words":5776},"filePathRelative":"posts/distribute/tcp.md","excerpt":"<blockquote>\\n<p>note：本篇是关于 TCP 的知识点记录，会比较琐碎。</p>\\n</blockquote>\\n<h2>基础认识</h2>\\n<p><strong>TCP（Transmission Control Protocol）</strong>：传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议；是为了在不可靠的互联网络上提供可靠的端到端字节流而专门设计的一个传输协议；TCP 位于网络 OSI 七层模型中的第四层 Transport（传输）层。</p>\\n<figure><figcaption>TCP 协议头结构</figcaption></figure>\\n<p>一个 TCP 连接需要四元组来表示同一个连接，即源 IP（<code>src_ip</code>）、源端口（<code>src_port</code>）、目标 IP（<code>dst_ip</code>）、目标端口（<code>dst_port</code>）；但其实还有一个协议，即五元组，而若仅考虑 TCP，则是四元组。</p>"}');export{f as comp,u as data};
