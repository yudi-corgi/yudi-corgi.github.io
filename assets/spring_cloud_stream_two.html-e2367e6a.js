import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as u,a as s,d as a,w as e,b as n,e as o}from"./app-6e175621.js";const k="/assets/Binder实现-77a09afd.png",r="/assets/stream2-IDEA控制台-1545e41f.jpg",d="/assets/消息头属性-1426e343.jpg",m="/assets/基础消息头属性-498b31c5.png",v="/assets/stream2-IDEA控制台信息2-37c1e709.png",b="/assets/GUI队列信息-2c8c37d9.png",g="/assets/stream2-IDEA控制台信息3-00c350bc.jpg",y={},f=s("h2",{id:"binder",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#binder","aria-hidden":"true"},"#"),n(" Binder")],-1),h={href:"https://docs.spring.io/spring-cloud-stream/reference/spring-cloud-stream/overview-binder-abstraction.html",target:"_blank",rel:"noopener noreferrer"},q=o('<p>Stream 本身提供了多个 MQ 的 Binder 实现，如下图（标有 <em>partner maintain</em> 说明并非 Spring Cloud Stream 官方提供而是由 MQ 厂商自己开发接入）。</p><figure><img src="'+k+`" alt="Binder 实现" tabindex="0" loading="lazy"><figcaption>Binder 实现</figcaption></figure><h3 id="多-binder-实例配置" tabindex="-1"><a class="header-anchor" href="#多-binder-实例配置" aria-hidden="true">#</a> 多 Binder 实例配置</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">stream</span><span class="token punctuation">:</span>
      <span class="token comment"># 当配置多个 Binder 时，此项必须配置，否则启动报错 </span>
      <span class="token key atrule">default-binder</span><span class="token punctuation">:</span> rabbit1
      <span class="token key atrule">binders</span><span class="token punctuation">:</span>
        <span class="token comment"># binder 自定义名称</span>
        <span class="token key atrule">rabbit1</span><span class="token punctuation">:</span>
          <span class="token comment"># 可填 rabbit、kafka，其它 Binder 实现有自己的环境配置方式，查看对应的 Binder 官文即可 </span>
          <span class="token key atrule">type</span><span class="token punctuation">:</span> rabbit
          <span class="token key atrule">environment</span><span class="token punctuation">:</span>
            <span class="token key atrule">spring</span><span class="token punctuation">:</span>
              <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
                <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1
                <span class="token key atrule">username</span><span class="token punctuation">:</span> admin
                <span class="token key atrule">password</span><span class="token punctuation">:</span> admin123
                <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
        <span class="token key atrule">rabbit2</span><span class="token punctuation">:</span>
          <span class="token key atrule">type</span><span class="token punctuation">:</span> rabbit
          <span class="token key atrule">environment</span><span class="token punctuation">:</span>
            <span class="token key atrule">spring</span><span class="token punctuation">:</span>
              <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
                <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.2
                <span class="token key atrule">username</span><span class="token punctuation">:</span> admin
                <span class="token key atrule">password</span><span class="token punctuation">:</span> admin123
                <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上便是对 RabbitMQ Binder 的多实例环境配置，若同时配置了 <code>spring.rabbitmq.*</code> 的环境配置，那么后者优先级会更高，要注意。</p><p>随后只需要在绑定中声明使用的 Binder 即可，不指定则使用默认 Binder：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">stream</span><span class="token punctuation">:</span>
      <span class="token key atrule">bindings</span><span class="token punctuation">:</span>
        <span class="token key atrule">demoConsumer-in-0</span><span class="token punctuation">:</span>
          <span class="token key atrule">destination</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>consumer<span class="token punctuation">-</span>topic
          <span class="token key atrule">binder</span><span class="token punctuation">:</span> rabbit2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不同-mq-的互动" tabindex="-1"><a class="header-anchor" href="#不同-mq-的互动" aria-hidden="true">#</a> 不同 MQ 的互动</h3><p>在异构系统中，接入不同 MQ 系统是有可能的，比如 A 系统通过 RabbitMQ 生产消息，经过消息处理服务后会流转至 B 系统，而 B 系统使用的是 Kafka，那么这个消息处理服务自然就要同时接入 RabbitMQ、Kafka 了。虽然说依靠 Spring Boot 对 RabbitMQ、Kafka 的集成也能是能达到目的，但是在此种方式下，各类 MQ 不同的配置、API 操作混合使用会为系统带来复杂性，提高了维护成本，而这时选择 Stream 来统一 MQ 的操作则是一个很好的方案。</p><p>在上方的配置中只是使用了 RabbitMQ，现在再补充一下 Kafka，也很简单，如下（记得引入 <code>stream-kafka</code> 依赖）：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">stream</span><span class="token punctuation">:</span>
      <span class="token key atrule">binders</span><span class="token punctuation">:</span>
        <span class="token comment"># 自定义 Binder 名称</span>
        <span class="token key atrule">kafka1</span><span class="token punctuation">:</span>
          <span class="token comment"># 类型填 Kafka</span>
          <span class="token key atrule">type</span><span class="token punctuation">:</span> kafka
          <span class="token key atrule">environment</span><span class="token punctuation">:</span>
            <span class="token key atrule">spring</span><span class="token punctuation">:</span>
              <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
                <span class="token key atrule">stream</span><span class="token punctuation">:</span>
                  <span class="token key atrule">kafka</span><span class="token punctuation">:</span>
                    <span class="token key atrule">binder</span><span class="token punctuation">:</span>
                      <span class="token key atrule">brokers</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">9092</span>
                      <span class="token key atrule">auto-create-topics</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment"># 自动创建 Topic</span>
                      <span class="token key atrule">auto-add-partitions</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 自动添加分区</span>
                      <span class="token key atrule">min-partition-count</span><span class="token punctuation">:</span> <span class="token number">3</span>     <span class="token comment"># 创建的主题最小分区数，默认 1，必须上面两个属性都为 true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述配置看起来有点冗余，但配置需求便是如此😂。同样会跟 Spring 集成 Kafka 时使用的 <code>spring.kafka.bootstrap-servers</code> 环境配置冲突，后者优先级高。</p><p>接下来演示下一个简单示例：向 RabbitMQ 发送消息后，经过消费处理再路由至 Kafka 消费。直接上代码：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 此处省略 Binder 配置，按照上面配置即可</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
  	<span class="token key atrule">function</span><span class="token punctuation">:</span>
  	  <span class="token key atrule">definition</span><span class="token punctuation">:</span> rabbitConsumer;kafkaConsumer
    <span class="token key atrule">stream</span><span class="token punctuation">:</span>
      <span class="token key atrule">bindings</span><span class="token punctuation">:</span>
        <span class="token comment"># 分别配置两个 MQ 的输入绑定，注意 binder 选择</span>
        <span class="token key atrule">rabbitConsumer-in-0</span><span class="token punctuation">:</span>
          <span class="token key atrule">destination</span><span class="token punctuation">:</span> rabbit<span class="token punctuation">-</span>exchange
          <span class="token key atrule">group</span><span class="token punctuation">:</span> rabbit<span class="token punctuation">-</span>queue
          <span class="token key atrule">binder</span><span class="token punctuation">:</span> rabbit1
        <span class="token key atrule">kafkaConsumer-in-0</span><span class="token punctuation">:</span>
          <span class="token key atrule">destination</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>topic
          <span class="token key atrule">group</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>group
          <span class="token key atrule">binder</span><span class="token punctuation">:</span> kafka1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQHandler</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">StreamBridge</span> streamBridge<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">rabbitConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> msg <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RabbitMQ 消费消息：&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            msg<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 将字符串转为大写后再发往 Kafka</span>
            msg <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            streamBridge<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;kafkaConsumer-in-0&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> msg <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Kafka 消费消息：&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            msg<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/send&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">StreamBridge</span> streamBridge<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/demo&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> msg <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        streamBridge<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;rabbitConsumer-in-0&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="控制台信息" tabindex="0" loading="lazy"><figcaption>控制台信息</figcaption></figure><h2 id="死信队列" tabindex="-1"><a class="header-anchor" href="#死信队列" aria-hidden="true">#</a> 死信队列</h2><p>接下来展示 Stream 如何实现 MQ 的死信队列，基本上也是依靠配置就完成了，同样以 Rabbit MQ 为例。</p><p>在此先跟大家回顾一遍，RabbitMQ 中消息成为死信的三种情况：</p><ul><li>当消息被拒绝 ACK，并且不重回队列</li><li>消息生存时间（TTL）过期</li><li>队列达到最大长度无法再容纳消息</li></ul><p>先看下消息 TTL 和队列长度的配置，只要分别配置对应的属性即可：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 指定队列消息的超时时间</span>
<span class="token key attr-name">spring.cloud.stream.rabbit.bindings.&lt;binding-name&gt;.consumer.ttl</span><span class="token punctuation">=</span><span class="token value attr-value">5000</span>
<span class="token comment"># 指定队列的最大消息数</span>
<span class="token key attr-name">spring.cloud.stream.rabbit.bindings.&lt;binding-name&gt;.consumer.max-length</span><span class="token punctuation">=</span><span class="token value attr-value">10</span>
<span class="token comment"># 指定队列所有消息的最大总字节数</span>
<span class="token key attr-name">spring.cloud.stream.rabbit.bindings.&lt;binding-name&gt;.consumer.max-length-bytes</span><span class="token punctuation">=</span><span class="token value attr-value">1024</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再来说说消息拒绝，这就涉及到了消息接收后的 ACK，在原来的 Spring 集成 RabbitMQ 中，需要在消息监听器中通过 Channel 对象才能进行操作：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;queueName&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// do something...</span>
        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码的消息监听方法中 Spring 会帮助我们传入 Channel 对象，但 Stream 程序中都是依靠 <strong>Consumer</strong>、<strong>Function</strong> 进行消息处理并自动完成 ACK，出入参都只有 <code>Message</code>，那么该怎么获取 Channel 对象呢？其实答案就在消息的 <code>MessageHeaders</code> 中。</p><p>首先设置绑定为手动 ACK：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.stream.rabbit.bindings.&lt;binding-name&gt;.consumer.acknowledge-mode</span><span class="token punctuation">=</span><span class="token value attr-value">manual</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>之后在消息消费时，就可以从消息的 MessageHeaders 属性中取到 Channel 对象进行操作：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">stringConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> msg <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消息消费：&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">MessageHeaders</span> headers <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            headers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 取到 Channel 通道</span>
            <span class="token class-name">Channel</span> amqpChannel <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">AmqpHeaders</span><span class="token punctuation">.</span><span class="token constant">CHANNEL</span><span class="token punctuation">,</span> <span class="token class-name">Channel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Long</span> amqpDeliveryTag <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">AmqpHeaders</span><span class="token punctuation">.</span><span class="token constant">DELIVERY_TAG</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">assert</span> amqpChannel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                
                <span class="token comment">// 拒绝 ACK 消息，并且不重回队列（参数三）</span>
                amqpChannel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>amqpDeliveryTag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// ACK 确认消息</span>
                amqpChannel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>amqpDeliveryTag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+'" alt="断点查看消息 MessageHeaders 信息" tabindex="0" loading="lazy"><figcaption>断点查看消息 MessageHeaders 信息</figcaption></figure><p>这里有两个需要特别注意的点：</p>',31),C=s("li",null,[n("首先必须设置 "),s("code",null,"acknowledge-mode=manual"),n("，才能在 "),s("code",null,"MessageHeader"),n(" 中获取到 "),s("code",null,"amqp_channel"),n(" 属性信息；")],-1),w=s("strong",null,"StreamBridge",-1),M=s("code",null,"MessageHeaders",-1),_=o(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 无法生效</span>
<span class="token class-name">StreamBridge</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;demoConsumer-in-0&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 正常使用</span>
<span class="token class-name">StreamBridge</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;demoConsumer-out-0&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 指定输入绑定的 destination</span>
<span class="token class-name">StreamBridge</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;demoConsumer-exchange&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="指定输入绑定发送消息后获取的 MessageHeaders" tabindex="0" loading="lazy"><figcaption>指定输入绑定发送消息后获取的 MessageHeaders</figcaption></figure><p>OK，说完消息成为死信的操作，我们回到死信队列如何使用的主线上，先上配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">function</span><span class="token punctuation">:</span>
      <span class="token key atrule">definition</span><span class="token punctuation">:</span> normalConsumer;deadLetterConsumer
    <span class="token key atrule">stream</span><span class="token punctuation">:</span>
      <span class="token key atrule">rabbit</span><span class="token punctuation">:</span>
        <span class="token key atrule">bindings</span><span class="token punctuation">:</span>
          <span class="token key atrule">normalConsumer-in-0</span><span class="token punctuation">:</span>
            <span class="token key atrule">consumer</span><span class="token punctuation">:</span>
              <span class="token key atrule">queue-name-group-only</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
              <span class="token key atrule">acknowledge-mode</span><span class="token punctuation">:</span> manual
              <span class="token key atrule">ttl</span><span class="token punctuation">:</span> <span class="token number">5000</span>
              <span class="token key atrule">max-length</span><span class="token punctuation">:</span> <span class="token number">10</span>
              <span class="token key atrule">max-length-bytes</span><span class="token punctuation">:</span> <span class="token number">1024</span>
              <span class="token comment"># 是否绑定 DLQ 到死信交换机，默认 false，若未指定下面的 DLQ/DLX，则自动生成的</span>
              <span class="token comment"># 死信交换机名称为 prefix + DLX（direct），死信队列为 {group}.dlq，路由键为 {group}</span>
              <span class="token key atrule">auto-bind-dlq</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
              <span class="token comment"># 自定义死信交换机及其队列</span>
              <span class="token key atrule">dead-letter-exchange</span><span class="token punctuation">:</span> dead<span class="token punctuation">-</span>letter<span class="token punctuation">-</span>exchange
              <span class="token key atrule">dead-letter-exchange-type</span><span class="token punctuation">:</span> direct
              <span class="token key atrule">dead-letter-queue-name</span><span class="token punctuation">:</span> dead<span class="token punctuation">-</span>letter<span class="token punctuation">-</span>queue
              <span class="token key atrule">dead-letter-routing-key</span><span class="token punctuation">:</span> dead<span class="token punctuation">-</span>letter<span class="token punctuation">-</span>key
              <span class="token key atrule">dlq-ttl</span><span class="token punctuation">:</span> <span class="token number">5000</span>
              <span class="token comment"># 超过重试次数依旧失败后，消息会发入 DLQ，默认 true，会将错误堆栈信息放在消息 header 中</span>
              <span class="token key atrule">republish-to-dlq</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
              <span class="token comment"># 指示除了错误堆栈信息外，消息其它 header 所能占用的字节大小，默认 20000</span>
              <span class="token key atrule">frame-max-headroom</span><span class="token punctuation">:</span> <span class="token number">20000</span>
          <span class="token comment"># 消费死信队列数据的输入绑定配置，要完全跟上面死信信息的配置一致</span>
          <span class="token key atrule">deadLetterConsumer-in-0</span><span class="token punctuation">:</span>
            <span class="token key atrule">consumer</span><span class="token punctuation">:</span>
              <span class="token key atrule">exchange-type</span><span class="token punctuation">:</span> direct
              <span class="token key atrule">queue-name-group-only</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
              <span class="token key atrule">binding-routing-key</span><span class="token punctuation">:</span> dead<span class="token punctuation">-</span>letter<span class="token punctuation">-</span>key
              <span class="token key atrule">ttl</span><span class="token punctuation">:</span> <span class="token number">5000</span>
      <span class="token key atrule">bindings</span><span class="token punctuation">:</span>
        <span class="token key atrule">normalConsumer-out-0</span><span class="token punctuation">:</span>
          <span class="token key atrule">destination</span><span class="token punctuation">:</span> normal<span class="token punctuation">-</span>consumer<span class="token punctuation">-</span>exchange
        <span class="token key atrule">normalConsumer-in-0</span><span class="token punctuation">:</span>
          <span class="token key atrule">destination</span><span class="token punctuation">:</span> normal<span class="token punctuation">-</span>consumer<span class="token punctuation">-</span>exchange
          <span class="token key atrule">group</span><span class="token punctuation">:</span> normal<span class="token punctuation">-</span>consumer<span class="token punctuation">-</span>queue
          <span class="token key atrule">consumer</span><span class="token punctuation">:</span>
          	<span class="token comment"># 消费重试次数，默认 3 次，搭配 republish-to-dlq，若是消费逻辑本身有错误，重试失败也可将消息发往 DLQ</span>
            <span class="token key atrule">max-attempts</span><span class="token punctuation">:</span> <span class="token number">3</span>
        <span class="token key atrule">deadLetterConsumer-in-0</span><span class="token punctuation">:</span>
          <span class="token key atrule">destination</span><span class="token punctuation">:</span> dead<span class="token punctuation">-</span>letter<span class="token punctuation">-</span>exchange
          <span class="token key atrule">group</span><span class="token punctuation">:</span> dead<span class="token punctuation">-</span>letter<span class="token punctuation">-</span>queue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码的重点除了 <code>normalConsumer-in-0</code> 的 <strong>DLX/DLQ</strong> 配置之外，还有 <code>deadLetterConsumer-in-0</code> 的配置，死信消息一般都需要进行额外处理，<code>deadLetterConsumer-in-0</code> 便是实现这个作用，但对于它来说其实根本不知道有死信消息这回事，它只会监听是否已有绑定的交换机和队列（有则匹配，无则创建），以及队列是否有消息可进行消费，所以 <code>deadLetterConsumer-in-0</code> 的配置就得跟 <code>normalConsumer-in-0</code> <strong>DLX</strong> 的配置一致，否则就会提示预期的配置信息与已存在的交换机（或队列）不一致，从而导致死信队列的消息无法被正常消费。</p><p>接下来是代码，拒绝 ACK 并且不重回队列来构造死信：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQHandler</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 普通消息消费函数，手动拒绝 ACK 让消息进入 DLQ
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">normalConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> msg <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;拒绝消息成为死信：&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">MessageHeaders</span> headers <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Channel</span> amqpChannel <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">AmqpHeaders</span><span class="token punctuation">.</span><span class="token constant">CHANNEL</span><span class="token punctuation">,</span> <span class="token class-name">Channel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Long</span> amqpDeliveryTag <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">AmqpHeaders</span><span class="token punctuation">.</span><span class="token constant">DELIVERY_TAG</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			
            <span class="token comment">// do something... 消息消费错误进行拒绝</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">assert</span> amqpChannel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token comment">// 拒绝 ack 且不重入队列，构造死信消息</span>
                amqpChannel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>amqpDeliveryTag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 死信消息消费函数
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">deadLetterConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> msg <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;死信消息消费：&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/send&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">StreamBridge</span> streamBridge<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;demo&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        streamBridge<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;normalConsumer-out-0&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当启动服务后调用接口就会看到控制台打印如下：</p><figure><img src="`+v+'" alt="控制台信息" tabindex="0" loading="lazy"><figcaption>控制台信息</figcaption></figure><p>查看 RabbitMQ GUI 也能看到队列已绑定 DLX：</p><figure><img src="'+b+`" alt="GUI 队列信息" tabindex="0" loading="lazy"><figcaption>GUI 队列信息</figcaption></figure><h2 id="延迟队列" tabindex="-1"><a class="header-anchor" href="#延迟队列" aria-hidden="true">#</a> 延迟队列</h2><p>RabbitMQ 延迟队列使用需要插件 <code>rabbitmq_delayed_message_exchange</code> 的支持，关于插件如何查看、安装、启用，网上已有众多资料，就不在此赘述，我们重点看 Stream 程序中的应用就行，比起死信队列的配置和使用，延迟队列就更加简单了。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">stream</span><span class="token punctuation">:</span>
      <span class="token key atrule">rabbit</span><span class="token punctuation">:</span>
        <span class="token key atrule">bindings</span><span class="token punctuation">:</span>
          <span class="token key atrule">demoConsumer-out-0</span><span class="token punctuation">:</span>
            <span class="token key atrule">producer</span><span class="token punctuation">:</span>
              <span class="token key atrule">delayed-exchange</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
              <span class="token comment"># 用 SpEL 表达式指定消息的延迟时间获取，若不想指定表达式，可在消息头添加 x-delay 属性指定延迟时长，单位 ms</span>
              <span class="token key atrule">delay-expression</span><span class="token punctuation">:</span> <span class="token string">&quot;headers[&#39;first&#39;] == 1 ? 2000 : 3000&quot;</span>
          <span class="token key atrule">demoConsumer-in-0</span><span class="token punctuation">:</span>
            <span class="token key atrule">consumer</span><span class="token punctuation">:</span>
              <span class="token key atrule">queue-name-group-only</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
              <span class="token comment"># 启用延迟交换机，会根据该值判断是否在创建交换机时添加属性 x-delayed-type</span>
              <span class="token key atrule">delayed-exchange</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">bindings</span><span class="token punctuation">:</span>
        <span class="token key atrule">demoConsumer-in-0</span><span class="token punctuation">:</span>
          <span class="token key atrule">destination</span><span class="token punctuation">:</span> delay<span class="token punctuation">-</span>consumer<span class="token punctuation">-</span>exchange
          <span class="token key atrule">group</span><span class="token punctuation">:</span> delay<span class="token punctuation">-</span>consumer<span class="token punctuation">-</span>queue
        <span class="token key atrule">demoConsumer-out-0</span><span class="token punctuation">:</span>
          <span class="token key atrule">destination</span><span class="token punctuation">:</span> delay<span class="token punctuation">-</span>consumer<span class="token punctuation">-</span>exchange
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">demoConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> msg <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前消费时间：&quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消息内容：&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/send&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">StreamBridge</span> streamBridge<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;demo&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> msg <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>
            <span class="token comment">// 延迟时间的固定属性是 x-delay，但没有配置 delay-expression 时可用</span>
            <span class="token comment">// .setHeader(&quot;x-delay&quot;, 3000)</span>
            <span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送时间：&quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        streamBridge<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;demoConsumer-out-0&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+'" alt="控制台输出" tabindex="0" loading="lazy"><figcaption>控制台输出</figcaption></figure><p>同样需要注意，StreamBridge 发送消息时要指定输出绑定或者动态目的地，而不能是输入绑定，否则延迟功能失效。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本篇所描述的 Binder、RabbitMQ 死信/延迟队列的配置使用其实都不难理解。</p><p>Binder 体现了 Stream 的真正强大之处——它抽象了底层 MQ 的复杂配置和操作，提供了统一的接口和 API，使得开发者能够轻松地在不同的 MQ 系统间切换，而无需深陷于每种 MQ 特有的实现细节。死信队列和延迟队列作为 RabbitMQ 的高级功能，在 Stream 的帮助下，其配置也变得直观而简洁。</p><p>此外，不只是 RabbitMQ，Stream 也为 Kafka 提供了 DLX 配置，若读者对于 Kafka 死信队列是如何实现的感兴趣，也可以追踪源码看看 <code>StreamBridge#send</code> 方法的执行流程，探索实现细节。</p><p>到目前为止，系列第一、二篇都是讲述 Stream 如何简化配置、使用 MQ 本身所拥有的功能，下一篇将介绍 Stream 自己的独特功能：<strong>分区、多输入/输出参数函数实现</strong>。</p>',22);function x(S,B){const t=p("RouterLink"),c=p("ExternalLinkIcon");return i(),u("div",null,[s("p",null,[a(t,{to:"/posts/framework/spring/spring_cloud_stream_one.html"},{default:e(()=>[n("上篇")]),_:1}),n("主要讲了 Spring Cloud Stream 的基础用法以及对 RabbitMQ 的配置使用，但若只看这点，那么跟 Spring Boot 集成 MQ 的方式比起来并没有什么突出的地方。Spring Cloud Stream 强大之处是在于隐藏了各类 MQ 不同且（可能）繁琐的配置和代码操作，提供了统一的概念（Binder、Binding、Message）、配置（输入/输出绑定、生产/消费）、消息收发 API 以及函数定义，用一套做法就完成对不同 MQ 系统的使用。这听起来是不是很熟悉~~~？其实这就是门面（或外观）模式的体现，类似 SLF4J 日志、Spring 的 ApplicationContext 等，隐藏了背后依赖库、框架或其它对象的复杂实现，提供一个简单的门面接口来使用。")]),f,s("p",null,[n("Binder 作为与各个 MQ 系统集成的核心，Stream 采用 Spring Boot 进行配置（也就是具体的 MQ 服务环境配置、连接跟 Spring Boot 集成 MQ 一致），Binder 抽象使 Stream 应用程序能够灵活地连接中间件，如可以在运行时动态选择外部目标（如 Kafka-Topic 或 RabbitMQ-Excahnge）与消息处理程序的输入和输出（例如函数的输入参数及其返回参数）之间的映射。同时 Binder 抽象也是 Stream 的扩展点，这意味着开发人员可根据需求实现自己的 Binder，官网对此已有"),s("a",h,[n("说明"),a(c)]),n("。")]),q,s("ul",null,[C,s("li",null,[n("其次，使用 "),w,n(" 发送消息时不能指定输入绑定去发送消息，必须指定其输出绑定或者采用"),a(t,{to:"/posts/framework/spring/spring_cloud_stream_one.html#dynamic-destination"},{default:e(()=>[n("动态目的地")]),_:1}),n("的方式，否则获取到的 "),M,n(" 将只包含基础信息而已（原因在"),a(t,{to:"/posts/framework/spring/spring_cloud_stream_one.md/#dynamic-destination"},{default:e(()=>[n("第一篇")]),_:1}),n("就已经提到了）。")])]),_])}const R=l(y,[["render",x],["__file","spring_cloud_stream_two.html.vue"]]);export{R as default};
