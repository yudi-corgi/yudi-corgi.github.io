import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as o,o as s}from"./app-CaxHSNMY.js";const r="/assets/sharding1-D4euwY-P.webp",i="/assets/sharding2-DCHpfBHQ.webp",n="/assets/sharding3-Cis-c76P.webp",d="/assets/distributed1-iDZVjPaw.webp",c="/assets/distributed2-DWUnf3SM.webp",h={};function p(l,e){return s(),a("div",null,e[0]||(e[0]=[o('<h2 id="写在前头" tabindex="-1"><a class="header-anchor" href="#写在前头"><span>写在前头</span></a></h2><p>本篇是 <a href="https://medium.com/@magda7817/sharded-does-not-imply-distributed-572fdafc4040" target="_blank" rel="noopener noreferrer">Sharded Does Not Imply Distributed</a> 一文的翻译。对于后端人员来说，分片的概念并不陌生，诸如 ElasticSearch、Redis、MySQL 等数据库都有针对于分片的实现方案来解决某些业务场景。文中对数据库分片与分布式数据库的主要区别做了说明，但请注意：<strong>分片数据库也是分布式系统</strong>。</p><p><strong>以下是太长不看版（由 AI 整理）</strong>：</p><p>文章《分片并不意味着分布式》主要讨论了数据库分片（Sharding）与分布式数据库（Distributed Databases）之间的区别：</p><ol><li><strong>分片（Sharding）</strong>：分片是一种技术，它通过将原始数据集拆分为多个分片（shards），并将这些分片分布在多个独立的数据库实例上来实现水平可扩展性。分片解决方案的关键组件是协调器（coordinator），它负责了解数据分布并映射客户端请求到特定的分片和数据库实例。分片数据库实例不相互通信，它们存在于孤立的环境中。</li><li><strong>分布式数据库</strong>：分布式数据库采用分片技术在数据库节点集群中分布数据和负载，但它们建立在无共享架构之上，不依赖于协调器组件。集群中的所有节点都了解彼此和数据分布，可以直接路由客户端请求到适当的分片所有者，并执行多节点事务。分布式数据库在扩展时会自动重新平衡和拆分分片，节点维护数据的冗余副本，即使部分节点故障也能继续操作。</li><li><strong>分片与分布式的区别</strong>：分片涉及将数据拆分到多个独立实例，但这并不意味着系统是分布式的（单机多实例）。分布式数据库则没有中央协调器，其节点相互了解，管理数据分布，并无缝处理客户端请求。</li><li><strong>数据库设计选择</strong>：理解分片和分布式数据库的细微差别对于数据库的设计和选择至关重要，因为它们各自有不同的优点和适用场景。</li></ol><p>文章也提到，如果读者对分片数据库架构感兴趣，可以考虑探索 CitusData 或 Azure CosmosDB for PostgreSQL、Vitess for MySQL、Oracle Distributed Autonomous Database 和 MongoDB Sharded Cluster。而对于真正的分布式数据库架构，可以考虑研究 Google Spanner、YugabyteDB、CockroachDB、Apache Cassandra 或 Apache Ignite。</p><p><strong>以下是原本+翻译：</strong></p><h2 id="分片并不意味着分布式-sharded-does-not-imply-distributed" tabindex="-1"><a class="header-anchor" href="#分片并不意味着分布式-sharded-does-not-imply-distributed"><span>分片并不意味着分布式 <br>Sharded Does Not Imply Distributed</span></a></h2><p>Sharding is a technique that distributes data and load across several standalone database instances. This method leverages horizontal scalability by splitting the original dataset into shards, which are then distributed across multiple database instances.<br> 分片是一种在多个独立数据库实例之间分配数据和负载的技术。此方法通过将原始数据集拆分为分片，然后将其分布在多个数据库实例中来利用水平可扩展性。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>But, even though the verb “distributes” appears in the definition of sharding, a sharded database is not a distributed one.<br> 但是，即使分片的定义中出现了动词“分布”，分片数据库也不是分布式数据库。</p><h2 id="分片解决方案-sharding-solutions" tabindex="-1"><a class="header-anchor" href="#分片解决方案-sharding-solutions"><span>分片解决方案 <br>Sharding Solutions</span></a></h2><p>Every sharding solution has one critical component in its architecture. This component can go by various names, including coordinator, router, or director:<br> 每一种分片解决方案的架构中都有一个关键组件。该组件可以有各种名称，包括协调器、路由器或导向器：</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>The coordinator is the sole component aware of data distribution. It maps client requests to specific shards and then to the corresponding database instance. This is why clients must always route their requests through the coordinator.<br> 协调器是唯一了解数据分布的组件。它将客户端请求映射到特定的分片，然后映射到相应的数据库实例。这就是为什么客户端必须始终通过协调器路由其请求。</p><p>For example, if a client wants to insert a new record into the <code>Car</code>table, the request first goes to the coordinator. The coordinator maps the record’s primary key to one of the shards and then forwards the request to the database instance responsible for that shard.<br> 例如，如果客户端想要将新记录插入 <code>Car</code> 表中，则请求首先发送到协调器。协调器将记录的主键映射到其中一个分片，然后将请求转发到负责该分片的数据库实例。</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>In the schema above, first, the coordinator maps key <code>121</code> to shard <code>10</code> and, second, inserts the record into table <code>car_10</code> that is stored on the database instance owning shard <code>10</code><br> 在上面的架构中，首先，协调器将键 <code>121</code> 映射到分片 <code>10</code> ，然后将记录插入到存储在数据库实例上的表 <code>car_10</code> 中拥有分片 <code>10</code></p><p>However, one question remains: Why is the coordinator even needed in sharding solutions? The answer is straightforward. The shards are stored on database instances designed for single-server deployments.<br> 然而，仍然存在一个问题：为什么分片解决方案中甚至需要协调器？答案很简单。分片存储在专为单服务器部署而设计的数据库实例上。</p><p><em>These database instances do not communicate with each other, nor do they support any protocols that would facilitate such communication. Unaware of each other, they exist in their own isolated environments, oblivious to the fact that they are part of a larger system.<br> 这些数据库实例不相互通信，也不支持任何促进此类通信的协议。他们彼此不知情，存在于自己孤立的环境中，没有意识到自己是一个更大系统的一部分。</em></p><p>Consequently, the coordinator is indispensable in sharding solutions. If you’re interested in delving deeper into sharded database architectures, consider exploring CitusData or Azure CosmosDB for PostgreSQL, Vitess for MySQL, Oracle Distributed Autonomous Database, and MongoDB Sharded Cluster.<br> 因此，协调器在分片解决方案中是不可或缺的。如果您有兴趣深入研究分片数据库架构，请考虑探索 CitusData 或 Azure CosmosDB for PostgreSQL、Vitess for MySQL、Oracle 分布式自治数据库和 MongoDB 分片集群。</p><h2 id="分布式数据库-distributed-databases" tabindex="-1"><a class="header-anchor" href="#分布式数据库-distributed-databases"><span>分布式数据库 <br>Distributed Databases</span></a></h2><p>Much like sharded database solutions, distributed databases also employ similar sharding techniques to distribute data and load across a cluster of database nodes. However, unlike sharding solutions, distributed databases do not rely on a coordinator component.<br> 与分片数据库解决方案非常相似，分布式数据库也采用类似的分片技术来跨数据库节点集群分布数据和加载。然而，与分片解决方案不同，分布式数据库不依赖于协调器组件。</p><p><strong>Distributed databases are built on a shared-nothing architecture</strong>, which doesn’t have a single component, like the coordinator, burdened with making numerous decisions:<br><strong>分布式数据库建立在无共享架构之上</strong>，该架构没有像协调器这样的单一组件，需要做出大量决策：</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><em>All nodes in the cluster are aware of each other and, consequently, the data distribution. By communicating directly, each node can route a client request to the appropriate shard owner. Additionally, they can execute and coordinate multi-node transactions. When scaling to more nodes, the cluster automatically rebalances and splits shards. The nodes maintain redundant copies of data (based on a configured replication factor) and can continue operations without downtime, even if some nodes fail.<br> 集群中的所有节点都了解彼此，从而了解数据分布。通过直接通信，每个节点都可以将客户端请求路由到适当的分片所有者。此外，它们还可以执行和协调多节点交易。当扩展到更多节点时，集群会自动重新平衡并拆分分片。节点维护数据的冗余副本（基于配置的复制因子），并且即使某些节点出现故障，也可以在不停机的情况下继续操作。</em></p><p>All of this operates transparently for the client, who simply needs to establish a connection with any of the nodes and allow that node to manage the distributed aspects.<br> 所有这些对客户端来说都是透明的，客户端只需与任何节点建立连接并允许该节点管理分布式方面。</p><p>For example, a client might connect to <code>node1</code> and insert a new <code>Car</code> record with the id <code>121</code>. If <code>node1</code> is the owner of the record’s shard, then it will store the record locally and employ a consensus algorithm to replicate the change to a subset of other nodes. If not, <code>node1</code> will forward the record to the shard’s owner, which might be <code>node4</code>.<br> 例如，客户端可能连接到 <code>node1</code> 并插入 ID 为 <code>121</code> 的新 <code>Car</code> 记录。如果 <code>node1</code> 是记录分片的所有者，那么它将在本地存储该记录，并采用共识算法将更改复制到其他节点的子集。如果不是， <code>node1</code> 会将记录转发给分片的所有者，该所有者可能是 <code>node4</code> 。</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>If you’re interested in exploring the architectures of genuine distributed databases, consider looking into Google Spanner, YugabyteDB, CockroachDB, Apache Cassandra, or Apache Ignite.<br> 如果您有兴趣探索真正的分布式数据库的架构，请考虑研究 Google Spanner、YugabyteDB、CockroachDB、Apache Cassandra 或 Apache Ignite。</p><p>In the realm of databases, sharding and distribution are often conflated, but they serve distinct purposes.<br> 在数据库领域，分片和分布经常被混为一谈，但它们有不同的目的。</p><p>While sharding involves splitting data across multiple standalone instances, it doesn’t inherently mean the system is distributed. The presence of a coordinator in sharding solutions, which directs client requests to the appropriate shard, underscores this distinction.<br> 虽然分片涉及将数据拆分到多个独立实例中，但这并不意味着系统本质上是分布式的。分片解决方案中协调器的存在，将客户端请求引导到适当的分片，强调了这种区别。</p><p>On the other hand, distributed databases, built on a shared-nothing architecture, lack this centralized coordinator. Nodes in these systems are aware of each other, manage data distribution, and handle client requests seamlessly.<br> 另一方面，建立在无共享架构之上的分布式数据库缺乏这种集中的协调器。这些系统中的节点相互了解、管理数据分发并无缝处理客户端请求。</p><p>Both architectures have their merits, and understanding their nuances is crucial for informed database design and selection.<br> 两种架构都有其优点，了解它们的细微差别对于明智的数据库设计和选择至关重要。</p>',34)]))}const m=t(h,[["render",p]]),b=JSON.parse('{"path":"/posts/reprint/sharded_does_not_imply_distributed.html","title":"分片并不意味着分布式","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"分片并不意味着分布式","description":"介绍数据库分片与分布式数据库的区别","tag":["杂谈"],"date":"2023-10-12T00:00:00.000Z","sticky":true,"category":"杂谈","cover":"/assets/images/minions_cover9.jpg","icon":"tabler:blade","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分片并不意味着分布式\\",\\"image\\":[\\"https://blog.yudi-corgi.site/assets/images/minions_cover9.jpg\\"],\\"datePublished\\":\\"2023-10-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-03T13:09:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"YUDI-Corgi\\",\\"url\\":\\"https://github.com/yudi-corgi\\"}]}"],["meta",{"property":"og:url","content":"https://blog.yudi-corgi.site/posts/reprint/sharded_does_not_imply_distributed.html"}],["meta",{"property":"og:site_name","content":"Black Hole"}],["meta",{"property":"og:title","content":"分片并不意味着分布式"}],["meta",{"property":"og:description","content":"介绍数据库分片与分布式数据库的区别"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://blog.yudi-corgi.site/assets/images/minions_cover9.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-03T13:09:37.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://blog.yudi-corgi.site/assets/images/minions_cover9.jpg"}],["meta",{"name":"twitter:image:alt","content":"分片并不意味着分布式"}],["meta",{"property":"article:tag","content":"杂谈"}],["meta",{"property":"article:published_time","content":"2023-10-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-03T13:09:37.000Z"}]]},"git":{"createdTime":1705237729000,"updatedTime":1706965777000,"contributors":[{"name":"YUDI-Corgi","username":"YUDI-Corgi","email":"1019509861@qq.com","commits":2,"url":"https://github.com/YUDI-Corgi"}]},"readingTime":{"minutes":8.37,"words":2512},"filePathRelative":"posts/reprint/sharded_does_not_imply_distributed.md","excerpt":"<h2>写在前头</h2>\\n<p>本篇是 <a href=\\"https://medium.com/@magda7817/sharded-does-not-imply-distributed-572fdafc4040\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Sharded Does Not Imply Distributed</a> 一文的翻译。对于后端人员来说，分片的概念并不陌生，诸如 ElasticSearch、Redis、MySQL 等数据库都有针对于分片的实现方案来解决某些业务场景。文中对数据库分片与分布式数据库的主要区别做了说明，但请注意：<strong>分片数据库也是分布式系统</strong>。</p>"}');export{m as comp,b as data};
