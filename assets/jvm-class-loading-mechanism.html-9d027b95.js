const e=JSON.parse('{"key":"v-a973e02c","path":"/posts/java/jvm-class-loading-mechanism.html","title":"JVM 类加载机制","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"JVM 类加载机制","description":"基于 JDK8 讲解 HashMap 的源码","tag":["Java","JVM"],"date":"2020-07-15T00:00:00.000Z","sticky":true,"category":"Java","cover":"/assets/images/minions_cover6.jpg","icon":"fluent-mdl2:disconnect-virtual-machine","isOriginal":true,"head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/black-hole/posts/java/jvm-class-loading-mechanism.html"}],["meta",{"property":"og:site_name","content":"Black Hole"}],["meta",{"property":"og:title","content":"JVM 类加载机制"}],["meta",{"property":"og:description","content":"基于 JDK8 讲解 HashMap 的源码"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/black-hole/assets/images/minions_cover6.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-13T09:34:59.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"JVM 类加载机制"}],["meta",{"property":"article:author","content":"YUDI-Corgi"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2020-07-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-13T09:34:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM 类加载机制\\",\\"image\\":[\\"https://mister-hope.github.io/black-hole/\\"],\\"datePublished\\":\\"2020-07-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-13T09:34:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"YUDI-Corgi\\",\\"url\\":\\"https://github.com/yudi-corgi\\"}]}"]]},"headers":[{"level":2,"title":"什么是类的加载","slug":"什么是类的加载","link":"#什么是类的加载","children":[]},{"level":2,"title":"类的加载过程","slug":"类的加载过程","link":"#类的加载过程","children":[{"level":3,"title":"加载","slug":"加载","link":"#加载","children":[]},{"level":3,"title":"连接","slug":"连接","link":"#连接","children":[{"level":4,"title":"验证：确保被加载的类的正确性","slug":"验证-确保被加载的类的正确性","link":"#验证-确保被加载的类的正确性","children":[]},{"level":4,"title":"准备：为类的静态变量分配内存，并将其初始化为默认值","slug":"准备-为类的静态变量分配内存-并将其初始化为默认值","link":"#准备-为类的静态变量分配内存-并将其初始化为默认值","children":[]},{"level":4,"title":"解析：把常量池内的符号引用转换为直接引用","slug":"解析-把常量池内的符号引用转换为直接引用","link":"#解析-把常量池内的符号引用转换为直接引用","children":[]}]},{"level":3,"title":"初始化","slug":"初始化","link":"#初始化","children":[]}]},{"level":2,"title":"类加载器","slug":"类加载器","link":"#类加载器","children":[{"level":3,"title":"双亲委派模型","slug":"双亲委派模型","link":"#双亲委派模型","children":[]},{"level":3,"title":"自定义类加载器","slug":"自定义类加载器","link":"#自定义类加载器","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1695354336000,"updatedTime":1705138499000,"contributors":[{"name":"CDY","email":"chendongyu@rt.com","commits":1},{"name":"YUDI-Corgi","email":"1019509861@qq.com","commits":1}]},"readingTime":{"minutes":9.27,"words":2780},"filePathRelative":"posts/java/jvm-class-loading-mechanism.md","localizedDate":"2020年7月15日","excerpt":"<p>在 <a href=\\"/black-hole/posts/java/jvm-memory-model.html\\" target=\\"blank\\">JVM-内存模型</a> 篇已经详细讲解了 JVM 内存模型的结构，如果想先了解 JVM 的内存模型，可以戳一下链接先去看看哦。这一篇，我将着重描述 Java 类加载机制，在 JVM 中类的加载到底经历了哪些过程。</p>\\n<h2> 什么是类的加载</h2>\\n<p>类的加载指的是将类的 <code>.class</code> 文件中的二进制数据读入到内存中，将其放在 JVM 运行时数据区的方法区内，然后在堆区创建一个<code>java.lang.Class</code>对象，用来封装类在方法区内的数据结构。类的加载的最终结果是位于堆区中的 Class 对象，Class 对象封装了类在方法区内的数据结构，并提供了访问方法区内的数据结构的接口。</p>"}');export{e as data};
