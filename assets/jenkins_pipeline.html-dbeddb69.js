import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as p,a as n,b as s,d as e,e as i}from"./app-b3a6cb5a.js";const c="/assets/pipeline-流程示例图-de010014.png",u="/assets/pipeline-script-d84447b4.jpeg",r="/assets/pipeline-scm-b319c2a1.jpeg",d="/assets/pipeline-multi-branch-creat-76053bc7.jpeg",k="/assets/pipeline-multi-branch-discover-267949f5.jpeg",v="/assets/pipeline-multi-branch-build-bcd3ecee.jpeg",m="/assets/pipeline-multi-branch-auto-build-a24f6030.jpeg",g="/assets/pipeline-buildWithParams-f54831a4.jpeg",b="/assets/pipeline-input-1-8dd4f967.png",h="/assets/pipeline-input-2-0cc4ecc8.png",f="/assets/pipeline-input-3-a808c1ab.png",_="/assets/pipeline-input-4-81885f58.png",J="/assets/pipeline-agent-1-800dd68c.jpeg",y="/assets/pipeline-agent-2-8ca57a1a.jpeg",x="/assets/pipeline-agent-3-9a5f9768.jpeg",E="/assets/pipeline-agent-4-b38413ba.jpeg",w="/assets/pipeline-agent-5-e092b57c.jpeg",S="/assets/pipeline-default-jenkinsfile-0d2ed908.png",P="/assets/pipeline-default-jenkinsfile-2-2cc3b3d7.png",j={},D=n("h2",{id:"流水线-pipeline",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#流水线-pipeline","aria-hidden":"true"},"#"),s(" 流水线 Pipeline")],-1),A=n("h3",{id:"概念",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概念","aria-hidden":"true"},"#"),s(" 概念")],-1),C={href:"https://www.jenkins.io/doc/book/pipeline/",target:"_blank",rel:"noopener noreferrer"},q=n("em",null,"持续交付管道",-1),M=i('<blockquote><p>Note：<strong>CDP</strong> 是将软件从版本控制系统直接交付给客户的流程的自动化表达。对软件的每项更改（在源代码管理中提交）在发布过程中都会经历一个复杂的过程，此过程涉及以可靠且可重复的方式构建软件，以及通过测试和部署的多个阶段来推进构建的软件。</p></blockquote><p>Pipeline 的定义会写在一个文本文件，即 <strong>Jenkinsfile</strong>，其可以随着代码一起提交到源代码仓库，是 <strong>Pipeline-as-code</strong> 的基础，此行为将 CDP 视为要像任何其他代码一样进行版本控制和审核。</p><ul><li><strong>Pipeline</strong>：是用户定义的 CD 管道模型，Pipeline 的代码定义了整个构建过程，其中通常包括构建、测试然后交付应用程序的阶段。pipeline 块也是<a href="#%E5%A3%B0%E6%98%8E%E5%BC%8F%E7%AE%A1%E9%81%93%E8%AF%AD%E6%B3%95">声明式管道语法</a>的一部分</li><li><strong>Node</strong>（节点）：是 Jenkins 环境的一部分，即能够执行 Pipeline 的机器（详见<a href="#%E6%8E%A7%E5%88%B6%E5%99%A8%E9%9A%94%E7%A6%BB">控制器隔离</a>）。node 块也是<a href="#%E8%84%9A%E6%9C%AC%E5%BC%8F%E7%AE%A1%E9%81%93%E8%AF%AD%E6%B3%95">脚本式管道语法</a>的一部分</li><li><strong>Stage</strong>（阶段）：用于定义 Pipeline 各个阶段的任务子集（比如<em>构建、测试、部署</em>阶段），许多插件依赖于 Stage 来可视化 Pipeline 的状态或过程</li><li><strong>Step</strong>（步骤）：指定 Jenkins 在每个阶段里要执行什么操作</li></ul><figure><img src="'+c+'" alt="流水线流程示例图" tabindex="0" loading="lazy"><figcaption>流水线流程示例图</figcaption></figure><h3 id="jenkinsfile-语法概览" tabindex="-1"><a class="header-anchor" href="#jenkinsfile-语法概览" aria-hidden="true">#</a> Jenkinsfile 语法概览</h3>',5),B=n("strong",null,"声明式",-1),I=n("strong",null,"脚本式",-1),T={href:"https://www.jenkins.io/doc/book/pipeline/syntax/#compare",target:"_blank",rel:"noopener noreferrer"},N=n("a",{href:"#%E6%93%8D%E4%BD%9C%E6%BC%94%E7%A4%BA"},"操作演示",-1),R={href:"https://www.jenkins.io/doc/book/pipeline/syntax/",target:"_blank",rel:"noopener noreferrer"},U=i(`<h4 id="声明式管道语法" tabindex="-1"><a class="header-anchor" href="#声明式管道语法" aria-hidden="true">#</a> 声明式管道语法</h4><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>pipeline <span class="token punctuation">{</span>                    <span class="token comment">// 声明式语法开头</span>
    agent any                 <span class="token comment">// agent 指定执行此 Pipeline 的节点</span>
    stages <span class="token punctuation">{</span>                  <span class="token comment">// 阶段块</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Build&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 为阶段命名</span>
            steps <span class="token punctuation">{</span>           <span class="token comment">// 步骤块</span>
                sh <span class="token string">&#39;make&#39;</span>     <span class="token comment">// 这里假设执行 bash 命令</span>
                <span class="token comment">// ... 其它步骤</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// 可定义多个阶段</span>
            steps <span class="token punctuation">{</span>
                <span class="token comment">// ... 其它步骤</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Deploy&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            steps <span class="token punctuation">{</span>
                <span class="token comment">// ... 其它步骤</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="脚本式管道语法" tabindex="-1"><a class="header-anchor" href="#脚本式管道语法" aria-hidden="true">#</a> 脚本式管道语法</h4><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>node <span class="token punctuation">{</span>                    <span class="token comment">// 脚本式语法开头，表示在任何可用的节点上执行此 Pipeline</span>
    <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Build&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 指定阶段名称</span>
        <span class="token comment">//                // 执行步骤</span>
    <span class="token punctuation">}</span>
    <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// 其它阶段</span>
        <span class="token comment">// </span>
    <span class="token punctuation">}</span>
    <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Deploy&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment">// </span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="操作演示" tabindex="-1"><a class="header-anchor" href="#操作演示" aria-hidden="true">#</a> 操作演示</h3>`,5),L={href:"https://www.jenkins.io/doc/book/installing/",target:"_blank",rel:"noopener noreferrer"},G=n("h4",{id:"创建-pipeline",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#创建-pipeline","aria-hidden":"true"},"#"),s(" 创建 pipeline")],-1),O={href:"https://www.jenkins.io/doc/book/blueocean/",target:"_blank",rel:"noopener noreferrer"},z=i('<ol><li>进入 Jenkins GUI <em>Dashboard =&gt; New Item</em> 界面，选择 <em>Pipeline</em>，输入名称，点击 OK 即可创建流水线项目</li><li>进入配置界面后，在 <em>General - Description</em> 输入描述，在 <em>Pipeline - Definition</em> 选择 <em>Pipeline script</em>，即可编写 Jenkinsfile 脚本，最后 Save 并执行构建操作</li></ol><figure><img src="'+u+`" alt="流水线脚本配置" tabindex="0" loading="lazy"><figcaption>流水线脚本配置</figcaption></figure><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>pipeline <span class="token punctuation">{</span>                                    #<span class="token number">1</span>
    agent any                                 #<span class="token number">2</span>
    stages <span class="token punctuation">{</span>                                  #<span class="token number">3</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Stage 1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    #<span class="token number">4</span>
            steps <span class="token punctuation">{</span>                           #<span class="token number">5</span>
                sh <span class="token string">&#39;./scripts/build.sh&#39;</span>       #<span class="token number">6</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Stage 2&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            agent <span class="token punctuation">{</span> label <span class="token string">&#39;custom-label&#39;</span> <span class="token punctuation">}</span>    #<span class="token number">7</span>
            steps <span class="token punctuation">{</span>
                echo <span class="token string">&#39;Test step to do sth.&#39;</span>
                echo <span class="token string">&#39;Do sth. else.&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Stage 3&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            agent <span class="token punctuation">{</span>                           #<span class="token number">8</span>
                docker <span class="token punctuation">{</span>
                    image <span class="token string">&#39;maven:3-alpine&#39;</span>
                    label <span class="token string">&#39;custom-label&#39;</span>
                    args  <span class="token string">&#39;-v /tmp:/tmp&#39;</span>      <span class="token comment">// 要传递给 docker run 的运行时参数</span>
                <span class="token punctuation">}</span> 
            <span class="token punctuation">}</span>
            steps <span class="token punctuation">{</span>
                sh <span class="token string">&#39;mvn -v&#39;</span>                   #<span class="token number">9</span>
            <span class="token punctuation">}</span>
            post <span class="token punctuation">{</span>                            #<span class="token number">10</span>
                echo <span class="token string">&#39;Do sth.&#39;</span>                
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
	post <span class="token punctuation">{</span>                                    #<span class="token number">11</span>
        always <span class="token punctuation">{</span>
            echo <span class="token string">&#39;Finished execute.&#39;</span>          
        <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),$=i("<li><strong>#1</strong>：<code>pipeline { ... }</code> 块是声明式管道语法的开头，所有有效的声明式语法都包含在此块中</li><li><strong>#2</strong>：<code>agent</code> 用于指定整个流水线或特定阶段（如 <strong>#7</strong>）将在 Jenkins 环境中执行的位置（即执行构建的节点），Jenkins 可以配置多个节点，其可以是物理机、虚拟机或容器。可填内容如下： <ul><li><code>agent none</code>：在顶层声明时，表示不指定 agent，而由每个 Stage 自行指定 agent；若顶层配置此项，Stage 也不指定任何 agent（或 agent none），则会构建失败</li><li><code>agent any</code>：在任何可用的节点上执行流水线或阶段</li><li><code>agent { label ... }</code>：如 <strong>#7</strong>，在拥有指定标签的节点上执行流水线或阶段（<em>Manage Jenkins =&gt; Nodes</em> 选择节点配置即可设置 Label）</li><li><code>agent { node ... customWorkspace ... }</code>：与 <code>agent label</code> 方式效果等价，但可通过 <code>customWorkspace</code> 选项来控制节点的工作空间（默认是 <code>/var/#ROOT_DIR/workspace</code>，根路径是新增节点时指定）</li><li><code>agent { docker { ... } }</code>：使用给定的容器执行流水线或阶段（如 <strong>#8</strong>） <ul><li><code>docker args</code> 可填写大多数 <code>docker run</code> 时使用的参数，并且会强制抓取镜像（即使镜像已存在）</li><li><code>docker label</code> 标签效果与 <code>agent label</code> 类似，不过这里是用于指定 docker 容器在拥有指定标签的节点运行，不使用则默认是选择任一节点</li></ul></li><li><code>agent { dockerfile { ... } }</code>：使用源码仓库包含的 Dockerfile 构建的容器来执行流水线或阶段</li><li><code>agent { kubernetes { ... } }</code>：与上述所有方式区别在于，执行环境不依赖于 Jenkins 节点，而是在 K8s 集群中动态创建一个 POD 执行构建</li></ul></li><li><strong>#3</strong>：<code>stages</code> 块用于指定构建的各个阶段，包裹 1~n 个阶段指令，可定义在 pipeline / stage 块中</li><li><strong>#4</strong>：<code>stage(&#39;name&#39;)</code> 块指定阶段名称，该阶段所有步骤指令也会包裹在其中</li>",4),H=n("strong",null,"#5",-1),V=n("code",null,"steps",-1),K={href:"https://www.jenkins.io/doc/pipeline/steps/workflow-durable-task-step/#sh-shell-script",target:"_blank",rel:"noopener noreferrer"},F=n("strong",null,"#6",-1),W={href:"https://www.jenkins.io/doc/pipeline/steps/pipeline-build-step/",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"build job: 'job_name'",-1),Q={href:"https://www.jenkins.io/doc/pipeline/steps/workflow-basic-steps/#echo-print-message",target:"_blank",rel:"noopener noreferrer"},X={href:"https://www.jenkins.io/doc/pipeline/steps/",target:"_blank",rel:"noopener noreferrer"},Z=n("strong",null,"#10/#11",-1),nn=n("code",null,"post",-1),sn=n("code",null,"steps",-1),an=n("em",null,"always、success、failure、aborted",-1),en={href:"https://www.jenkins.io/doc/book/pipeline/syntax/#post",target:"_blank",rel:"noopener noreferrer"},tn=n("h4",{id:"使用-maven-构建-java-项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用-maven-构建-java-项目","aria-hidden":"true"},"#"),s(" 使用 Maven 构建 Java 项目")],-1),on={href:"https://github.com/jenkins-docs/simple-java-maven-app",target:"_blank",rel:"noopener noreferrer"},ln=n("li",null,[s("同样创建一个 Pipeline 项目，在 "),n("em",null,"Pipeline - Definition"),s(" 选择 "),n("em",null,"Pipeline script from SCM"),s("，然后填写 fork 的仓库地址（如果是自建的 gitlab 等平台还需要填写访问凭证 Credentials）")],-1),pn=n("li",null,[s("在 "),n("em",null,"Script Path"),s(" 指定 Jenkinsfile 在仓库中的位置即可 Save 并执行构建")],-1),cn=i('<figure><img src="'+r+`" alt="指定从 SCM 获取流水线脚本" tabindex="0" loading="lazy"><figcaption>指定从 SCM 获取流水线脚本</figcaption></figure><p>补充：鉴于笔者的 Jenkins 是 Docker 运行，容器内没有 Maven，有两种方式处理：</p><ol><li>修改 Jenkinsfile，将 agent 配置修改为 docker 运行一个包含 JDK 和 Maven 的镜像，在此环境中执行构建</li><li>在 Jenkins 所在机器安装好 Maven，在 <em>Manage Jenkins =&gt; Tools</em> 配置 Maven 的路径，然后修改 Jenkinsfile，添加 <a href="#tools">tools</a> 指令</li></ol><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token comment">// 由于笔者宿主机有 Maven，因此直接采用第二种：</span>
pipeline <span class="token punctuation">{</span>
    agent any

    tools <span class="token punctuation">{</span>
        <span class="token comment">// 这里的名称即为 Manage Jenkins =&gt; Tools 中配置的 Maven 名称</span>
        maven <span class="token string">&#39;Maven-3.9.9&#39;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// ... 其它指令不变</span>
<span class="token punctuation">}</span>

<span class="token comment">// 第一种方式如下：</span>
pipeline <span class="token punctuation">{</span>
    agent <span class="token punctuation">{</span>
        docker <span class="token punctuation">{</span>
            <span class="token comment">// 选择一个包含 Maven 和 JDK 的镜像</span>
            image <span class="token string">&#39;maven:3.9.9-eclipse-temurin-21-alpine&#39;</span>
            <span class="token comment">// 可选项，如果你的 Jenkins 是容器运行，</span>
            <span class="token comment">// 那么此处映射的宿主机其实就是 Jenkins 容器，Maven 是 Jenkins 容器里的容器</span>
            args <span class="token string">&#39;-v /opt/maven_repos:/root/.m2&#39;</span>    
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ... 其它指令不变</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多分支流水线" tabindex="-1"><a class="header-anchor" href="#多分支流水线" aria-hidden="true">#</a> 多分支流水线</h4>`,5),un={href:"https://github.com/jenkins-docs/simple-java-maven-app",target:"_blank",rel:"noopener noreferrer"},rn=n("li",null,[s("进入 Jenkins GUI "),n("em",null,"Dashboard => New Item"),s(" 界面，选择 "),n("em",null,"Multibranch Pipeline"),s("，输入名称，点击 OK 创建多分支流水线项目")],-1),dn=n("li",null,"同样输入仓库地址和 Jenkinsfile 在仓库里的路径",-1),kn=i('<figure><img src="'+d+'" alt="多分支流水线创建" tabindex="0" loading="lazy"><figcaption>多分支流水线创建</figcaption></figure><ol start="4"><li>创建项目后，Jenkins 会自动扫描一次仓库，来获取分支信息，至于分支的获取策略，可在这里配置</li></ol><figure><img src="'+k+'" alt="分支获取策略设置" tabindex="0" loading="lazy"><figcaption>分支获取策略设置</figcaption></figure><ol start="5"><li>其它配置按默认填写即可，或者可根据需要进行填充，最后点击 Save，这样最基本的多分支流水线项目就创建好了</li><li>Jenkins 会拉取项目分支并构建一次，以下是创建项目后的界面</li></ol><figure><img src="'+v+`" alt="多分支流水线项目构建" tabindex="0" loading="lazy"><figcaption>多分支流水线项目构建</figcaption></figure><p>以上述方式创建的项目，每个分支下都有独立的 Jenkinsfile 文件，可以随着分支一起提交并审核，针对环境修改脚本。而如果是项目里的多个分支都基于同一 Jenkinsfile 构建，则可以用 <code>when</code> 指令区分，项目里的 Jenkinsfile 修改如下：</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>pipeline <span class="token punctuation">{</span>
    
    <span class="token comment">// ... 省略其它</span>
    
    stages <span class="token punctuation">{</span>
       
        <span class="token comment">// ... 省略其它</span>
        
        <span class="token comment">// 发布到开发环境</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Deliver for dev&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            when <span class="token punctuation">{</span>
                branch <span class="token string">&#39;dev&#39;</span>               <span class="token comment">// 当分支为 dev 时执行该阶段</span>
            <span class="token punctuation">}</span>
            steps <span class="token punctuation">{</span>
                echo <span class="token string">&#39;This is dev env!!!&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 发布到测试环境</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Deliver for test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            when <span class="token punctuation">{</span>
                branch <span class="token string">&#39;test&#39;</span>              <span class="token comment">// 当分支为 test 时执行该阶段</span>
            <span class="token punctuation">}</span>
            steps <span class="token punctuation">{</span>
                echo <span class="token string">&#39;This is test env!!!&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 发布到生产环境</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Deliver for master&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            when <span class="token punctuation">{</span>
                branch <span class="token string">&#39;master&#39;</span>             <span class="token comment">// 当分支为 master 时执行该阶段</span>
            <span class="token punctuation">}</span>
            steps <span class="token punctuation">{</span>
                sh <span class="token string">&#39;./jenkins/scripts/deliver.sh&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a id="when"></a></p><p><strong>when</strong> 指令指定 Pipeline 根据给定的条件确定是否应该执行该阶段，指令块内必须至少包含一个条件，若有多个条件，则所有条件都为 true 才会执行该阶段。</p>`,9),vn={href:"https://www.jenkins.io/doc/book/pipeline/syntax/#when",target:"_blank",rel:"noopener noreferrer"},mn=i('<ul><li><em>branch</em>：只能在多分支流水线项目使用，内容会被当作 <em>Ant-style path globbing</em>（模式匹配语法）进行解析，支持两个参数 <ul><li><code>pattern</code>：匹配内容，<code>comparator</code> 参数未使用时，该参数不用显式指定</li><li><code>comparator</code>：比较方式，<code>EQUALS</code>（相等）、<code>GLOB</code>（默认，按 Ant-style 模式匹配）、<code>REGEXP</code>（按正则表达式匹配）</li></ul></li><li><em>changelog</em>：若指定表达式与 Git 提交信息匹配，则执行构建</li><li><em>not</em>：用于指定嵌套条件为 false 时执行构建，必须包含一个子条件，如 <code>when { not { branch &#39;dev&#39; } }</code></li><li><em>allOf</em>：用于指定嵌套条件都必须为 true 时执行构建，必须包含一个子条件</li><li><em>anyOf</em>：用于指定嵌套条件有一个为 true 时执行构建，必须包含一个子条件</li></ul><p>至于分支自动构建，在项目配置中（下图）可以设置定时扫描，或使用对应 SCM 平台的 WebHook 实现推送后自动构建，在传统 freestyle 项目也都有这些配置，就不再赘述。</p><figure><img src="'+m+`" alt="项目自动构建" tabindex="0" loading="lazy"><figcaption>项目自动构建</figcaption></figure><h3 id="jenkinsfile-常用语法" tabindex="-1"><a class="header-anchor" href="#jenkinsfile-常用语法" aria-hidden="true">#</a> Jenkinsfile 常用语法</h3><h4 id="environment" tabindex="-1"><a class="header-anchor" href="#environment" aria-hidden="true">#</a> environment</h4><p>用于指定环境变量，可在 <code>pipeline/stage</code> 块使用，并能与 <em>credentials()</em> 联合，通过凭证 ID 访问凭证。</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>pipeline <span class="token punctuation">{</span>
    agent any
    
    environment <span class="token punctuation">{</span>
        CC <span class="token operator">=</span> <span class="token string">&#39;clang&#39;</span>
    <span class="token punctuation">}</span>
    
    stages <span class="token punctuation">{</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Example credential&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            environment <span class="token punctuation">{</span>
                SERVICE_CREDS <span class="token operator">=</span> <span class="token function">credentials</span><span class="token punctuation">(</span><span class="token string">&#39;credential-id&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            steps <span class="token punctuation">{</span>
                sh <span class="token string">&#39;echo &quot;cc = $CC&quot;&#39;</span>
                sh <span class="token interpolation-string"><span class="token string">&quot;echo cc = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">env<span class="token punctuation">.</span>CC</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>   						    <span class="token comment">// 可通过 env 全局变量访问</span>
                sh <span class="token string">&#39;echo &quot;Credential is $SERVICE_CREDS&quot;&#39;</span>            
                sh <span class="token string">&#39;echo &quot;Service user is $SERVICE_CREDS_USR&quot;&#39;</span>      <span class="token comment">// 获取凭证中的 username</span>
                sh <span class="token string">&#39;echo &quot;Service password is $SERVICE_CREDS_PSW&quot;&#39;</span>  <span class="token comment">// 获取凭证中的 password</span>
                sh <span class="token string">&#39;printenv&#39;</span>                                       <span class="token comment">// 打印所有环境变量</span>
                sh <span class="token string">&#39;echo job_name = $JOB_NAME&#39;</span>                      <span class="token comment">// 环境变量访问方式一</span>
                sh <span class="token string">&#39;echo job_branch = \${BRANCH_NAME}&#39;</span>               <span class="token comment">// 环境变量访问方式二</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> parameters</h4><p>该指令用于指定用户在触发 Pipeline 时应提供的参数列表（即传统 freestyle 项目的 <em>Build with Parameters</em>)，这些参数的值可通过 <code>params</code> 对象在 Pipeline 步骤中进行访问。</p><p>每个参数都包含三个属性：<code>name、defaultValue、description</code>，参数类型如下：</p>`,10),gn=n("li",null,[n("code",null,"string"),s("：字符串")],-1),bn=n("li",null,[n("code",null,"text"),s("：文本，可包含多行")],-1),hn=n("li",null,[n("code",null,"booleanParam"),s("：布尔参数")],-1),fn=n("li",null,[n("code",null,"choice"),s("：选择参数")],-1),_n=n("code",null,"password",-1),Jn=n("li",null,"Jenkins 会将此参数标记为敏感数据，会触发一些安全机制：尝试在构建日志中屏蔽该值、限制该值如何被某些 Pipeline 步骤实例化或使用等",-1),yn={href:"https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#handling-credentials",target:"_blank",rel:"noopener noreferrer"},xn=i(`<div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>pipeline <span class="token punctuation">{</span>
    agent any
    parameters <span class="token punctuation">{</span>
        <span class="token function">string</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">&#39;BUILD_ADMIN&#39;</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> <span class="token string">&#39;Mr. Jenkins&#39;</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">&#39;Build User&#39;</span><span class="token punctuation">)</span>
        <span class="token function">text</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">&#39;REMARK&#39;</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">&#39;Enter some information about the build&#39;</span><span class="token punctuation">)</span>
        <span class="token function">booleanParam</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">&#39;TOGGLE&#39;</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">&#39;Toggle this value&#39;</span><span class="token punctuation">)</span>
        <span class="token comment">// choice 比较特殊，choices 列表的第一个选项才是默认选择</span>
        <span class="token function">choice</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">&#39;BUILD_ENV&#39;</span><span class="token punctuation">,</span> choices<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;DEV&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;TEST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PROD&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">&#39;Build environment&#39;</span><span class="token punctuation">)</span>
        <span class="token function">password</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">&#39;PASSWORD&#39;</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> <span class="token string">&#39;SECRET&#39;</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">&#39;Enter a password&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    stages <span class="token punctuation">{</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;TEST&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            steps <span class="token punctuation">{</span>
                echo <span class="token interpolation-string"><span class="token string">&quot;Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">params<span class="token punctuation">.</span>BUILD_ADMIN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
                echo <span class="token interpolation-string"><span class="token string">&quot;REMARK: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">params<span class="token punctuation">.</span>REMARK</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
                echo <span class="token interpolation-string"><span class="token string">&quot;Toggle: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">params<span class="token punctuation">.</span>TOGGLE</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
                echo <span class="token interpolation-string"><span class="token string">&quot;BUILD_ENV: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">params<span class="token punctuation">.</span>BUILD_ENV</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
                echo <span class="token interpolation-string"><span class="token string">&quot;PASSWORD: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">params<span class="token punctuation">.</span>PASSWORD</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用上述脚本创建一个项目后，可以看到左侧出现 <em>Build With Parameters</em>，点击即可进行参数设置。</p><figure><img src="`+g+'" alt="基于参数构建" tabindex="0" loading="lazy"><figcaption>基于参数构建</figcaption></figure><h4 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> options</h4><p>该指令支持从 Pipeline 本身中配置特定于 Pipeline 的选项，如：</p>',5),En=n("li",null,[n("strong",null,"disableConcurrentBuilds"),s("：不允许并发执行流水线，可用于防止同时访问共享资源等场景")],-1),wn=n("li",null,[n("strong",null,"skipStagesAfterUnstable"),s("：一旦构建状态变为 "),n("em",null,"UNSTABLE"),s("，则后续阶段将不再执行")],-1),Sn=n("li",null,[n("strong",null,"retry"),s("：在失败时, 重新尝试整个流水线的指定次数")],-1),Pn=n("li",null,[n("strong",null,"timeout"),s("：设置流水线运行的超时时间, 在此之后，Jenkins将中止流水线")],-1),jn={href:"https://www.jenkins.io/doc/book/pipeline/syntax/#options",target:"_blank",rel:"noopener noreferrer"},Dn=i(`<div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>pipeline <span class="token punctuation">{</span>
    agent any
    
    options <span class="token punctuation">{</span>
        <span class="token function">disableConcurrentBuilds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">skipStagesAfterUnstable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">timeout</span><span class="token punctuation">(</span>time<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">:</span> <span class="token string">&#39;HOURS&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 构建超时时间</span>
        <span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            			 <span class="token comment">// 最多尝试构建 1+3 次</span>
    <span class="token punctuation">}</span>
    
    stages <span class="token punctuation">{</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            steps <span class="token punctuation">{</span> 
                <span class="token comment">//...</span>
            <span class="token punctuation">}</span>
            options <span class="token punctuation">{</span>
                <span class="token comment">// timeout/retry 也可用在 stage 中使用，针对于所在阶段起作用</span>
                <span class="token function">timeout</span><span class="token punctuation">(</span>time<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">:</span> <span class="token string">&#39;MINUTES&#39;</span><span class="token punctuation">)</span>
                retry <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// ... 其它指令</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="triggers" tabindex="-1"><a class="header-anchor" href="#triggers" aria-hidden="true">#</a> triggers</h4><p>触发器指令定义重新触发 Pipeline 的自动化方式，可用触发器有：</p>`,3),An=n("strong",null,"cron",-1),Cn={href:"https://www.jenkins.io/doc/book/pipeline/syntax/#cron-syntax",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"triggers { cron('H */4 * * 1-5') }",-1),Mn=i("<li><strong>pollSCM</strong>：同样接收 cron 样式字符串，在固定间隔中，Jenkins 会检查 SCM 是否有更新，有则会重新触发 Pipeline</li><li><strong>upstream</strong>：接受以逗号分隔的作业名称和阈值。当任一作业以最小阈值完成时，将重新触发 Pipeline。该方式跟以往 Freestyle 项目的 <em>Build Triggers =&gt; Build after other projects are built</em> 其实是同个作用，当一个或多个指定的「上游 （upstream）」项目成功构建（或其他指定状态）后，自动触发当前项目的构建，可用场景如下： <ol><li>依赖构建：若 B 项目依赖于项目 A 产生的构件（如一个库、一个 API 依赖），当项目 A 成功构建后，项目 B 才应该被构建，那么项目 B 的流水线就可以设置 upstream 为项目 A</li><li>构建流水线拆分：一个非常复杂和耗时的构建/部署流程可能被拆分成多个独立的 Jenkins Pipeline，以提高模块化、可管理性和并行性</li><li>触发不同类型的任务：一个上游项目可能是编译和单元测试，成功后触发一个下游项目进行更耗时的集成测试、性能测试或安全扫描</li><li>扇出构建：这种场景可能比较常见，一个核心库更新后，多个依赖于它的项目都需要重新构建</li></ol></li>",2),Bn=i(`<div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>pipeline <span class="token punctuation">{</span>
    agent any
    
    triggers <span class="token punctuation">{</span>
        <span class="token function">cron</span><span class="token punctuation">(</span><span class="token string">&#39;H */4 * * 1-5&#39;</span><span class="token punctuation">)</span>
        <span class="token function">pollSCM</span><span class="token punctuation">(</span><span class="token string">&#39;H */4 * * 1-5&#39;</span><span class="token punctuation">)</span>
        <span class="token comment">// 可填阈值：SUCCESS、UNSTABLE、FAILURE，填写 FAILURE 表示构建状态为 SUCCESS、UNSTABLE、FAILURE 时都是符合要求</span>
        <span class="token function">upstream</span><span class="token punctuation">(</span>upstreamProjects<span class="token punctuation">:</span> <span class="token string">&#39;job_name1,job_name2&#39;</span><span class="token punctuation">,</span> threshold<span class="token punctuation">:</span> hudson<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Result<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// ... 其它指令</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="tools" tabindex="-1"><a class="header-anchor" href="#tools" aria-hidden="true">#</a> tools</h4><p>用于定义和使用 Jenkins <em>Manage Jenkins =&gt; Tools</em> 下的工具，主要支持 JDK、Maven、Gradle。</p><p>比如在 Tools 中配置了 Maven，则 Jenkinsfile 可以写：</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>pipeline <span class="token punctuation">{</span>
    agent any
    tools <span class="token punctuation">{</span>
        maven <span class="token string">&#39;custom-maven-name&#39;</span>    <span class="token comment">// Tools 中定义的 Maven 名称</span>
    <span class="token punctuation">}</span>
    stages <span class="token punctuation">{</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            steps <span class="token punctuation">{</span>
                sh <span class="token string">&#39;mvn --version&#39;</span>   <span class="token comment">// 命令的执行将会使用上方指定的 Maven 环境</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ... 其它指令</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> input</h4><p>该指令在执行构建时与 Jenkins 用户进行交互，当 <code>steps</code> 块包含该指令时，会在应用 <a href="#options">options</a> 指令后，执行 agent / <a href="#when">when</a> 指令之前暂停当前阶段。</p><p>包含以下参数：</p><ul><li><em>message</em>：必填，填写 input 表单时的展示内容</li><li><em>id</em>：可选，input 指令的标识符，默认为 <code>stage</code> 名称</li><li><em>ok</em>：可选，input 表单的 <em>ok</em> 按钮文本</li><li><em>submitter</em>：可选，指定允许提交 input 的用户或外部组名称，管理员不受影响（Jenkins 权限配置需安装 <em>Role-based Authorization Strategy</em> 插件）</li><li><em>submitterParameter</em>：可选，会返回提交 input 的用户 ID</li><li><em>parameters</em>：可选，提示用户需要提供的可选参数列表</li></ul><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>pipeline <span class="token punctuation">{</span>
    agent any
    stages <span class="token punctuation">{</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            input <span class="token punctuation">{</span>
                message <span class="token interpolation-string"><span class="token string">&quot;Should we continue?&quot;</span></span>
                ok <span class="token interpolation-string"><span class="token string">&quot;Yes, we should.&quot;</span></span>
                submitter <span class="token interpolation-string"><span class="token string">&quot;alice, bob&quot;</span></span>
                submitterParameter <span class="token interpolation-string"><span class="token string">&quot;SUBMITTER_ID&quot;</span></span>
                parameters <span class="token punctuation">{</span>
                    <span class="token function">string</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">&#39;PERSON&#39;</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> <span class="token string">&#39;Mr Jenkins&#39;</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">&#39;Who should I say hello to?&#39;</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            steps <span class="token punctuation">{</span>
                echo <span class="token interpolation-string"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">PERSON</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">SUBMITTER_ID</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+b+'" alt="input-效果一" tabindex="0" loading="lazy"><figcaption>input-效果一</figcaption></figure><figure><img src="'+h+'" alt="input-效果二" tabindex="0" loading="lazy"><figcaption>input-效果二</figcaption></figure><figure><img src="'+f+'" alt="input-效果三" tabindex="0" loading="lazy"><figcaption>input-效果三</figcaption></figure><figure><img src="'+_+'" alt="input-效果四" tabindex="0" loading="lazy"><figcaption>input-效果四</figcaption></figure><h2 id="分布式构建" tabindex="-1"><a class="header-anchor" href="#分布式构建" aria-hidden="true">#</a> 分布式构建</h2><h3 id="控制器隔离" tabindex="-1"><a class="header-anchor" href="#控制器隔离" aria-hidden="true">#</a> 控制器隔离</h3><p>Jenkins 服务属于 <strong>Controller/Agent</strong> 架构，服务自带一个**内置节点（built-in node）**用于执行构建操作，开箱即用。这是为了更容易使用 Jenkins，但并不推荐长久使用，因为在内置节点上运行的任何构建都具有与 Jenkins 进程相同的控制器文件系统访问权限级别。</p><p>Jenkins <strong>控制器</strong>就是其服务本身，充当决定如何、何时以及在何处运行作业的角色。同时，配置、授权和身份验证等管理任务也在控制器上执行，该控制器为 HTTP 请求提供服务。</p><p>而<strong>代理</strong>是负责执行具体作业的服务，它是一个小型 Java 客户端进程，与 Jenkins 控制器建立连接后，由控制器委托作业给其执行。</p><p>而在内置节点和代理节点中，都有各自的 <strong>Executor（执行器）</strong>，其本质是一个线程，其数量决定了可以并发运行的任务数量。</p>',20),In={href:"https://www.jenkins.io/doc/book/scaling/architecting-for-scale/",target:"_blank",rel:"noopener noreferrer"},Tn=n("strong",null,"分布式构建",-1),Nn=n("p",null,"分布式构建的存在意义是为了解决两种情况：",-1),Rn=n("ul",null,[n("li",null,[n("strong",null,"垂直增长"),s("：是指通过配置更多作业或编排更频繁的构建来增加 Jenkins 控制器实例上的负载，这也可能意味着更多的团队依赖于这个控制器（单点风险）；")]),n("li",null,[n("strong",null,"水平增长"),s("：是指创建额外的 Jenkins 控制器（即运行多个 Jenkins 服务）来适应新的团队或项目，而不是向现有控制器添加新的团队或项目（分开但缺乏统一管理）。")])],-1),Un=n("p",null,"在分布式构建环境中，Jenkins 控制器将仅使用其资源来处理 HTTP 请求和管理构建环境。构建的实际执行将委托给代理。使用此配置，可以水平扩展架构，从而允许单个 Jenkins 安装托管大量项目和构建环境。",-1),Ln=n("em",null,"Manage Jenkins => Nodes",-1),Gn=n("em",null,"Built-In Node => Configure",-1),On=n("strong",null,"应确保已设置了其它构建节点",-1),zn={href:"https://plugins.jenkins.io/job-restrictions/",target:"_blank",rel:"noopener noreferrer"},$n=n("code",null,"agent { label ... }",-1),Hn=i(`<blockquote><p>note：在 Jenkins 中，Agent（代理）也可称为 Node（节点），两者等价。</p></blockquote><h3 id="配置代理" tabindex="-1"><a class="header-anchor" href="#配置代理" aria-hidden="true">#</a> 配置代理</h3><p>代理本质是一个 Java 服务，因此需要有 JDK 环境，不过下面以 Docker 为例运行代理，官方镜像已包含了 JDK 环境。</p><ol><li>首先在要运行代理的机器上生成密钥：<code>ssh-keygen -f ~/.ssh/jenkins_agent_key</code></li><li>在 Jenkins GUI 中创建 Credentials <ul><li>在 <em>Manage Jenkins =&gt; Credentials</em> 选择 domains 为 global 的选项新建凭证</li><li><em>Kind</em> 选择 <em>SSH Username with private key</em>，自由填入 <em>ID</em>、<em>Description</em>、<em>Username</em>，<em>Private Key</em> 则直接拷贝步骤 1 生成密钥，<em>Passphrase</em> 是密码，生成密钥时有填则填，无则忽略，然后创建凭证即可。</li></ul></li><li>运行代理，宿主机端口可自定义：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>agent1 <span class="token parameter variable">-p</span> <span class="token number">22</span>:22 <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token string">&quot;JENKINS_AGENT_SSH_PUBKEY=[拷贝步骤 1 生成的公钥]&quot;</span> <span class="token punctuation">\\</span>
jenkins/ssh-agent:alpine-jdk21
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),Vn={start:"4"},Kn=n("li",null,[s("进入 "),n("em",null,"Manage Jenkins => Nodes"),s(" 新建节点，输入节点名称并选择类型（仅有 "),n("em",null,"Permanent Agent"),s(" 可选）")],-1),Fn=n("li",null,[n("em",null,"Launch agents via SSH"),s("：通过 Jenkins 控制器访问 Agent 所在机器后启动代理服务（即连接步骤 3 启动的容器），然后代理服务再与控制器进行连接")],-1),Wn=n("em",null,"Launch agent by connecting it to the controller",-1),Yn={href:"https://www.jenkins.io/doc/book/managing/nodes/#launch-inbound-agent-via-windows-scheduler",target:"_blank",rel:"noopener noreferrer"},Qn=i('<figure><img src="'+J+'" alt="agent-配置一" tabindex="0" loading="lazy"><figcaption>agent-配置一</figcaption></figure><figure><img src="'+y+'" alt="agent-配置二" tabindex="0" loading="lazy"><figcaption>agent-配置二</figcaption></figure><ol start="5"><li>节点新建后，会默认启动一次，但会因为密钥授权问题而失败。选择节点进入管理界面，点击左侧的 <em>Trust SSH Host Key</em> 信任密钥（即步骤 4 设置的密钥确认方式），右上角 <em>Launch agent</em> 再次启动即可</li></ol><figure><img src="'+x+'" alt="agent-信任密钥" tabindex="0" loading="lazy"><figcaption>agent-信任密钥</figcaption></figure><ol start="6"><li>重新构建项目：在流水线项目的 Jenkinsfile 中指定 <code>agent { label &#39;agent-1&#39; }</code> 后，在构建日志即可看到构建操作委托到 Agent 去执行了。</li></ol><figure><img src="'+E+'" alt="agent-日志打印" tabindex="0" loading="lazy"><figcaption>agent-日志打印</figcaption></figure><figure><img src="'+w+'" alt="agent-构建节点展示" tabindex="0" loading="lazy"><figcaption>agent-构建节点展示</figcaption></figure><h2 id="jenkinsfile-与代码分离管理" tabindex="-1"><a class="header-anchor" href="#jenkinsfile-与代码分离管理" aria-hidden="true">#</a> Jenkinsfile 与代码分离管理</h2>',8),Xn={href:"https://github.com/jenkinsci/pipeline-multibranch-defaults-plugin",target:"_blank",rel:"noopener noreferrer"},Zn=i('<ol><li>安装插件后，进入 <em>Manage Jenkins =&gt; Managed files</em> 新建配置 <em>Groovy file</em>，ID 可自定义，默认是 UUID，然后编写 Jenkinsfile 脚本</li><li>新建一个多分支流水线项目，注意本次在 <em>Build Configuration =&gt; Mode</em> 要选择 <em>by default Jenkinsfile</em>，并填入步骤 1 创建的配置文件 ID</li></ol><figure><img src="'+S+'" alt="指定默认的 Jenkinsfile" tabindex="0" loading="lazy"><figcaption>指定默认的 Jenkinsfile</figcaption></figure>',2),ns={start:"3"},ss=n("code",null,"UnapprovedUsageException: script not yet approved for use",-1),as={href:"https://github.com/jenkinsci/script-security-plugin",target:"_blank",rel:"noopener noreferrer"},es=n("ul",null,[n("li",null,[s("进入 "),n("em",null,"Manage Jenkins => In-process Script Approval"),s(" 即可看到被拦截的脚本，选择 Approve 批准即可，重新执行构建即可成功")]),n("li",null,[s("也可以直接在步骤 2 的示例图中勾选 "),n("em",null,"Run default Jenkinsfile within Groovy sandbox"),s("，表示让默认的 Jenkinsfile 运行在沙箱，那么就无需进行审批")])],-1),is=i('<figure><img src="'+P+`" alt="默认 Jenkinsfile 执行审批日志" tabindex="0" loading="lazy"><figcaption>默认 Jenkinsfile 执行审批日志</figcaption></figure><ol start="4"><li>以下是 defualt Jenkinsfile 的示例，但要根据实际情况去调整脚本，无法 1:1 复制使用 <ul><li>做法理解：假设创建多分支流水线项目名为 Demo-Test，然后在管理 Jenkinsfile 的仓库下创建 Demo-Test/dev、Demo-Test/test 等目录，下面放各自分支的 Jenkinsfile，通过拉取 Jenkinsfile 仓库后，以构建的作业名称和分支来加载对应 Jenkinsfile。</li></ul></li></ol><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>node <span class="token punctuation">{</span>
    
    <span class="token comment">// 保存当前运行的作业名称</span>
    <span class="token keyword">def</span> currentJobName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;&quot;</span></span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Checkout Jenkinsfile&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
            <span class="token comment">// 获取当前 Job 名称，并赋值给局部变量，通过 env 访问环境变量</span>
            <span class="token keyword">def</span> jobNameParts <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">env<span class="token punctuation">.</span>JOB_NAME</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;%2F&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
            <span class="token comment">// 注意：若流水线项目是建在文件夹下，那么直接取 0 就有问题，因为获取到的会是目录名称，而不是 Job 名称</span>
            currentJobName <span class="token operator">=</span> jobNameParts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            echo <span class="token interpolation-string"><span class="token string">&quot;Determined job name part for loading: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">currentJobName</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>

            <span class="token comment">// 2. clone Jenkinsfile 仓库</span>
            git url<span class="token punctuation">:</span> <span class="token string">&#39;https://github.com/xxx.git&#39;</span><span class="token punctuation">,</span>   <span class="token comment">// 填写 Jenkinsfile 仓库地址，可以是 HTTP 或 SSH</span>
                branch<span class="token punctuation">:</span> <span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span>                      <span class="token comment">// 指定拉取的分支，默认是 master</span>
                credentialsId<span class="token punctuation">:</span> <span class="token string">&#39;jenkins&#39;</span>             <span class="token comment">// 指定访问 SCM 的凭证，在 Jenkins 中配置后填写凭证 ID</span>
            echo <span class="token interpolation-string"><span class="token string">&quot;Checkout complete.&quot;</span></span>
        <span class="token punctuation">}</span>

        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Load Dynamic Jenkinsfile&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 根据 Job 名称及构建分支获取对应 Jenkinsfile</span>
            <span class="token keyword">def</span> check_groovy_file <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">currentJobName</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">env<span class="token punctuation">.</span>BRANCH_NAME</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/Jenkinsfile&quot;</span></span>
            <span class="token comment">// load 指令用于加载 Jenkinsfile</span>
            load check_groovy_file
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 当出现异常时，打印错误信息，并将构建结果设置为 FAILURE</span>
        echo <span class="token interpolation-string"><span class="token string">&quot;Pipeline failed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
        currentBuild<span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">&#39;FAILURE&#39;</span>
        <span class="token keyword">throw</span> e       <span class="token comment">// 重新抛出异常，使 Pipeline 失败</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Cleanup&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            echo <span class="token interpolation-string"><span class="token string">&quot;Performing cleanup tasks...&quot;</span></span>
            <span class="token function">cleanWs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 可选：清理工作空间</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>note1：default Jenkinsfile 之所以使用脚本式管道语法，是因为声明式管道语法规定有且仅有一个 pipeline 块，使其无法 load 同样包含 pipeline 块的 Jenkinsfile。而脚本式语法没有此类限制，能容纳此类设计为独立运行的 Jenkinsfile，故常用于编排。当然，你也可以在被 load 的文件仅编写 stages/steps 等指令从而实现构建。</p><p>note2：如果 default jenkinsfile 指定了运行的 Agent，那么要注意 load 加载的 Jenkinsfile 是否与 default Jenkinsfile 在同一个 Agent 上运行。若是，并且该 Agent 只配置了一个 Executor，那么就会造成死锁的情况，因为对于 Jenkins 来说，这是两个任务。</p></blockquote><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Jenkins Pipeline 不难理解，在明白了概念和语法后，就可以上手实操。Pipeline 也是让构建流程更加结构化，并且能像代码一样审计、迭代。对于实际项目的 CI/CD，其实在构建过程会更多的依赖 bash 脚本等的操作，如代码镜像构建、推送、K8S 部署、通知等等，有什么构建需求，就翻翻官网文档，看看提供的操作即可。</p>`,6);function ts(os,ls){const a=o("ExternalLinkIcon");return l(),p("div",null,[D,A,n("p",null,[n("strong",null,[n("a",C,[s("Jenkins Pipeline"),e(a)])]),s("（简称 Pipeline/流水线）是一套插件，支持实现"),q,s("（CDP，continuous delivery pipelines）并将其集成到 Jenkins 中。")]),M,n("p",null,[s("语法分为两种："),B,s("（Declarative）、"),I,s("（Scripted），两者都是 DSL（Pipeline domain-specific language）语言，虽然两者会被 Pipeline 引擎基于 Groovy 语法解析，但是声明式语法是一种更具结构化和限制性的 DSL，其存在是为了能更方便地编写 jenkinsfile，因此无法像脚本式一样能使用 Groovy 绝大多数特性（变量、函数、控制流语句等），两者语法具体比较可看官方文档"),n("a",T,[s("说明"),e(a)]),s("。")]),n("p",null,[s("在"),N,s("一节会细讲常用的语法关键词，官方文档直通车戳"),n("a",R,[s("这里"),e(a)]),s("。")]),U,n("blockquote",null,[n("p",null,[s("note：默认读者已经安装并运行 Jenkins，并能正确访问 Jenkins GUI。启动方式可看官文："),n("a",L,[s("安装 Jenkins"),e(a)]),s("。")])]),G,n("p",null,[s("创建流水线有两种方式：传统 GUI 和 "),n("a",O,[s("Blue Ocean"),e(a)]),s("，后者是针对 Pipeline 的 新 GUI 设计，主要提供易于使用的 Pipeline 可视化。由于操作演示专注于 Jenkinsfile 的编写，所以流水线创建方式不再强调（PS：Blue Ocean 支持以可视化的方式创建 Jenkinsfile）。")]),z,n("ul",null,[$,n("li",null,[H,s("："),V,s(" 块指定在所在阶段要执行的 1~n 个步骤，Jenkins 支持的步骤繁多，以下是比较常见的三种： "),n("ul",null,[n("li",null,[n("a",K,[s("sh"),e(a)]),s("：指定要执行的 bash 命令（如 "),F,s("）")]),n("li",null,[n("a",W,[s("build"),e(a)]),s("："),Y,s("，触发指定名称的 pipeline 执行构建")]),n("li",null,[n("a",Q,[s("echo"),e(a)]),s("：输出文本")]),n("li",null,[s("其余详见"),n("a",X,[s("官文"),e(a)])])])]),n("li",null,[Z,s("："),nn,s(" 定义在流水线或特定阶段的运行完成时执行的 1~n 个附加操作（与 "),sn,s(" 相似），post 支持多个后置条件块（如 "),an,s("），比较清晰易懂，其它条件块可看"),n("a",en,[s("官文"),e(a)])])]),tn,n("ol",null,[n("li",null,[s("本节将使用 Jenkins 官方文档提供的学习仓库 "),n("a",on,[s("simple-java-maven-app"),e(a)]),s("，读者可自行 fork 玩耍")]),ln,pn]),cn,n("ol",null,[n("li",null,[s("首先在 fork 的仓库 "),n("a",un,[s("simple-java-maven-app"),e(a)]),s(" 创建多个分支（比如 dev、prod）")]),rn,dn]),kn,n("p",null,[s("这里简单列下几种条件，其它详见"),n("a",vn,[s("官文"),e(a)]),s("：")]),mn,n("ul",null,[gn,bn,hn,fn,n("li",null,[_n,s("：密码 "),n("ul",null,[Jn,n("li",null,[n("a",yn,[s("Credentials"),e(a)]),s("是该参数在功能上的上位替代，关于凭证、敏感数据大多是配置于 Credentials 一起管理，password 比较侧重于 UI 输入时的视觉保密和临时性、半敏感性的信息输入")])])])]),xn,n("ul",null,[En,wn,Sn,Pn,n("li",null,[s("其它详见"),n("a",jn,[s("官文"),e(a)])])]),Dn,n("ul",null,[n("li",null,[An,s("：接受 "),n("a",Cn,[s("cron"),e(a)]),s(" 样式字符串以定义应重新触发 Pipeline 的固定间隔，如："),qn]),Mn]),Bn,n("p",null,[s("为了确保 Jenkins 控制器的稳定性，应在内置节点以外的其它节点上（即代理）执行构建，这在 Jenkins 中称为"),n("a",In,[Tn,e(a)]),s("（distributed builds）。")]),Nn,Rn,Un,n("p",null,[s("要防止构建直接在内置节点上运行，可导航至 Jenkis 的 "),Ln,s("。在列表中选择 "),Gn,s("。将 executor 数量设置为 0 并保存。同时"),On,s("（或 Cloud）得以执行构建，否则构建将无法执行。或者在配置了多节点后，可使用 "),n("a",zn,[s("Job Restrictions Plugin"),e(a)]),s(" 之类的插件来限制哪些 Job 可以在哪些节点（如内置节点）上运行（这与 Jenkinsfile 中的 "),$n,s(" 通过标签指定构建节点的表达式无关）。")]),Hn,n("ol",Vn,[n("li",null,[s("在 Jenkins 上设置代理 "),n("ul",null,[Kn,n("li",null,[s("详细配置信息如下图所示，而图二关于 Agent 启动方式： "),n("ul",null,[Fn,n("li",null,[Wn,s("：手动启动 Agent 服务后，直接连接到 Jenkins 控制器，该方式可看"),n("a",Yn,[s("官文"),e(a)])])])])])])]),Qn,n("p",null,[s("Jenkins Pileline（包括多分支 Pipeline）项目要求将 Jenkinsfile 保存在代码仓库的根目录，这让 Jenkinsfile 分散到了不同项目的各个分支中，对于后期的统一维护和功能扩展增加了成本。为了将 Jenkinsfile 与代码仓库分离，可通过插件 "),n("a",Xn,[s("Pipeline-multibranch-defaults-plugin"),e(a)]),s(" 实现。")]),Zn,n("ol",ns,[n("li",null,[s("首次执行构建可能会报错（如 "),ss,s("），这是因为项目的 Jenkinsfile 若从 SCM 中获取，则默认在 Groovy 沙箱中运行，以防止出现恶意代码。而使用 default Jenkinsfile 则并非如此，因为 Jenkins 认为在配置管理中（由管理员）新增的 Jenkinsfile 会比来源 SCM 的更受信任，并且为了灵活性，避免沙箱环境中操作权限受限，会在非沙箱环境中运行。但是由于 "),n("a",as,[s("Script Security Plugin"),e(a)]),s(" 插件（默认安装），它会检查脚本中的方法签名是否已存在于批准列表，否则需要管理员手动批准执行脚本。 "),es])]),is])}const us=t(j,[["render",ts],["__file","jenkins_pipeline.html.vue"]]);export{us as default};
