const e=JSON.parse('{"key":"v-cf5d4ce8","path":"/posts/framework/spring/spring_cloud_stream_two.html","title":"Spring Cloud Stream 系列（二）","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Spring Cloud Stream 系列（二）","description":"讲述 Spring Cloud Stream 多 Binder 配置实现不同 MQ 系统的无缝切换及死信、延迟队列的使用","tag":["Spring Cloud","MQ"],"date":"2024-01-07T00:00:00.000Z","sticky":true,"category":["Spring Cloud","MQ"],"cover":"/assets/images/minions_cover17.jpg","icon":"mdi:mq","isOriginal":true,"head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/black-hole/posts/framework/spring/spring_cloud_stream_two.html"}],["meta",{"property":"og:site_name","content":"Black Hole"}],["meta",{"property":"og:title","content":"Spring Cloud Stream 系列（二）"}],["meta",{"property":"og:description","content":"讲述 Spring Cloud Stream 多 Binder 配置实现不同 MQ 系统的无缝切换及死信、延迟队列的使用"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/black-hole/assets/images/minions_cover17.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-07T15:35:25.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Spring Cloud Stream 系列（二）"}],["meta",{"property":"article:author","content":"YUDI-Corgi"}],["meta",{"property":"article:tag","content":"Spring Cloud"}],["meta",{"property":"article:tag","content":"MQ"}],["meta",{"property":"article:published_time","content":"2024-01-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-07T15:35:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Cloud Stream 系列（二）\\",\\"image\\":[\\"https://mister-hope.github.io/black-hole/\\"],\\"datePublished\\":\\"2024-01-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-07T15:35:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"YUDI-Corgi\\",\\"url\\":\\"https://github.com/yudi-corgi\\"}]}"]]},"headers":[{"level":2,"title":"Binder","slug":"binder","link":"#binder","children":[{"level":3,"title":"多 Binder 实例配置","slug":"多-binder-实例配置","link":"#多-binder-实例配置","children":[]},{"level":3,"title":"不同 MQ 的互动","slug":"不同-mq-的互动","link":"#不同-mq-的互动","children":[]}]},{"level":2,"title":"死信队列","slug":"死信队列","link":"#死信队列","children":[]},{"level":2,"title":"延迟队列","slug":"延迟队列","link":"#延迟队列","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1717087994000,"updatedTime":1717774525000,"contributors":[{"name":"YUDI-Corgi","email":"1019509861@qq.com","commits":5}]},"readingTime":{"minutes":10.76,"words":3229},"filePathRelative":"posts/framework/spring/spring_cloud_stream_two.md","localizedDate":"2024年1月7日","excerpt":"<p><a href=\\"/black-hole/posts/framework/spring/spring_cloud_stream_one.html\\" target=\\"blank\\">上篇</a>主要讲了 Spring Cloud Stream 的基础用法以及对 RabbitMQ 的配置使用，但若只看这点，那么跟 Spring Boot 集成 MQ 的方式比起来并没有什么突出的地方。Spring Cloud Stream 强大之处是在于隐藏了各类 MQ 不同且（可能）繁琐的配置和代码操作，提供了统一的概念（Binder、Binding、Message）、配置（输入/输出绑定、生产/消费）、消息收发 API 以及函数定义，用一套做法就完成对不同 MQ 系统的使用。这听起来是不是很熟悉~~~？其实这就是门面（或外观）模式的体现，类似 SLF4J 日志、Spring 的 ApplicationContext 等，隐藏了背后依赖库、框架或其它对象的复杂实现，提供一个简单的门面接口来使用。</p>"}');export{e as data};
